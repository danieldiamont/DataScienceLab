The Loss Surface of Deep and Wide Neural Networks

Quynh Nguyen 1 Matthias Hein 1

Abstract
While the optimization problem behind deep
neural networks is highly non-convex, it is frequently observed in practice that training deep
networks seems possible without getting stuck in
suboptimal points. It has been argued that this
is the case as all local minima are close to being globally optimal. We show that this is (almost) true, in fact almost all local minima are
globally optimal, for a fully connected network
with squared loss and analytic activation function given that the number of hidden units of one
layer of the network is larger than the number
of training points and the network structure from
this layer on is pyramidal.

1. Introduction
The application of deep learning (LeCun et al., 2015) has
in recent years lead to a dramatic boost in performance in
many areas such as computer vision, speech recognition or
natural language processing. Despite this huge empirical
success, the theoretical understanding of deep learning is
still limited. In this paper we address the non-convex optimization problem of training a feedforward neural network.
This problem turns out to be very difficult as there can
be exponentially many distinct local minima (Auer et al.,
1996; Safran & Shamir, 2016). It has been shown that the
training of a network with a single neuron with a variety of
activation functions turns out to be NP-hard (Sima, 2002).
In practice local search techniques like stochastic gradient
descent or variants are used for training deep neural networks. Surprisingly, it has been observed (Dauphin et al.,
2014; Goodfellow et al., 2015) that in the training of stateof-the-art feedforward neural networks with sparse connectivity like convolutional neural networks (LeCun et al.,
1990; Krizhevsky et al., 2012) or fully connected ones one
1

Department of Mathematics and Computer Science, Saarland University, Germany. Correspondence to: Quynh Nguyen
<quynh@cs.uni-saarland.de>.
Proceedings of the 34 th International Conference on Machine
Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017
by the author(s).

does not encounter problems with suboptimal local minima. However, as the authors admit themselves in (Goodfellow et al., 2015), the reason for this might be that there
is a connection between the fact that these networks have
good performance and that they are easy to train.
On the theoretical side there have been several interesting
developments recently, see e.g. (Brutzkus & Globerson,
2017; Lee et al., 2016; Poggio & Liao, 2017; Rister & Rubin, 2017; Soudry & Hoffer, 2017; Zhou & Feng, 2017).
For some class of networks one can show that one can train
them globally optimal efficiently. However, it turns out that
these approaches are either not practical (Janzamin et al.,
2016; Haeffele & Vidal, 2015; Soltanolkotabi, 2017) as
they require e.g. knowledge about the data generating measure, or they modify the neural network structure and objective (Gautier et al., 2016). One class of networks which
are simpler to analyze are deep linear networks for which it
has been shown that every local minimum is a global minimum (Baldi & Hornik, 1988; Kawaguchi, 2016). While
this is a highly non-trivial result as the optimization problem is non-convex, deep linear networks are not interesting
in practice as one efficiently just learns a linear function. In
order to characterize the loss surface for general networks,
an interesting approach has been taken by (Choromanska
et al., 2015a). By randomizing the nonlinear part of a feedforward network with ReLU activation function and making some additional simplifying assumptions, they can relate it to a certain spin glass model which one can analyze.
In this model the objective of local minima is close to the
global optimum and the number of bad local minima decreases quickly with the distance to the global optimum.
This is a very interesting result but is based on a number
of unrealistic assumptions (Choromanska et al., 2015b). It
has recently been shown (Kawaguchi, 2016) that if some of
these assumptions are dropped one basically recovers the
result of the linear case, but the model is still unrealistic.
In this paper we analyze the case of overspecified neural
networks, that is the network is larger than what is required
to achieve minimum training error. Under overspecification (Safran & Shamir, 2016) have recently analyzed under
which conditions it is possible to generate an initialization
so that it is in principle possible to reach the global optimum with descent methods. However, they can only deal
with one hidden layer networks and have to make strong

The Loss Surface of Deep and Wide Neural Networks

assumptions on the data such as linear independence or
cluster structure. In this paper overspecification means that
there exists a very wide layer, where the number of hidden units is larger than the number of training points. For
this case, we can show that a large class of local minima
is globally optimal. In fact, we will argue that almost every critical point is globally optimal. Our results generalize
previous work of (Yu & Chen, 1995), who have analyzed a
similar setting for one hidden layer networks, to networks
of arbitrary depth. Moreover, it extends results of (Gori &
Tesi, 1992; Frasconi et al., 1997) who have shown that for
certain deep feedforward neural networks almost all local
minima are globally optimal whenever the training data is
linearly independent. While it is clear that our assumption
on the number of hidden units is quite strong, there are several recent neural network structures which contain a quite
wide hidden layer relative to the number of training points
e.g. in (Lin et al., 2016) they have 50,000 training samples
and the network has one hidden layer with 10,000 hidden
units and (Ba & Caruana, 2014) have 1.1 million training
samples and a layer with 400,000 hidden units. We refer to
(Ciresan et al., 2010; Neyshabur et al., 2015; Vincent et al.,
2010; Caruana et al., 2001) for other examples where the
number of hidden units of one layer is on the order of the
number of training samples. We conjecture that for these
kind of wide networks it still holds that almost all local
minima are globally optimal. The reason is that one can
expect linear separability of the training data in the wide
layer. We provide supporting evidence for this conjecture
by showing that basically every critical point for which the
training data is linearly separable in the wide layer is globally optimal. Moreover, we want to emphasize that all of
our results hold for neural networks used in practice. There
are no simplifying assumptions as in previous work.

2. Feedforward Neural Networks and
Backpropagation
We are mainly concerned with multi-class problems but
our results also apply to multivariate regression problems.
Let N be the number of training samples and denote by
X = [x1 , . . . , xN ]T ∈ RN ×d , Y = [y1 , . . . , yN ]T ∈
RN ×m the input resp. output matrix for the training data
(xi , yi )N
i=1 , where d is the input dimension and m the
number of classes. We consider fully-connected feedforward networks with L layers, indexed from 0, 1, 2, . . . , L,
which correspond to the input layer, 1st hidden layer, etc,
and output layer. The network structure is determined by
d×n1
× ... ×
the weight matrices (Wk )L
k=1 ∈ W := R
nk−1 ×nk
nL−1 ×m
R
×. . .×R
; where nk is the number of hidden units of layer k (for consistency, we set n0 = d, nL =
n1
m), and the bias vectors (bk )L
× . . . × Rn L .
k=1 ∈ B := R
We denote by P = W × B the space of all possible parameters of the network. In this paper, [a] denotes the set

of integers {1, 2, . . . , a} and [a, b] the set of integers from
a to b. The activation function σ : R → R is assumed at
least to be continuously differentiable, that is σ ∈ C 1 (R).
In this paper, we assume that all the functions are applied
componentwise. Let fk , gk : Rd → Rnk be the mappings
from the input space to the feature space at layer k, which
are defined as
f0 (x) = x, fk (x) = σ(gk (x)), gk (x) = WkT fk−1 (x) + bk
for every k ∈ [L], x ∈ Rd . In the following, let Fk =
[fk (x1 ), fk (x2 ), . . . , fk (xN )]T ∈ RN ×nk and Gk =
[gk (x1 ), gk (x2 ), . . . , gk (xN )]T ∈ RN ×nk be the matrices
that store the feature vectors of layer k after and before applying the activation function. One can easily check that
F1 = σ(XW1 + 1N bT1 ),
Fk = σ(Fk−1 Wk + 1N bTk ), for k ∈ [2, L].
In this paper we analyze the behavior of the loss of the
network without any form of regularization, that is the final
objective Φ : P → R of the network is defined as
m
N X

 X
l(fLj (xi ) − yij )
Φ (Wk , bk )L
=
k=1

(1)

i=1 j=1

where l : R → R is assumed to be a continuously differentiable loss function, that is l ∈ C 1 (R). The prototype
loss which we consider in this paper is the squared loss,
l(α) = α2 , which is one of the standard loss functions in
the neural network literature. We assume throughout this
paper that the minimum of (1) is attained.
The idea of backpropagation is the core of our theoretical
analysis. Lemma 2.1 below shows well-known relations for
feed-forward neural networks, which are used throughout
the paper. The derivative of the loss w.r.t. the value of
unit j at layer k evaluated at a single training sample xi is
∂Φ
denoted as δkj (xi ) = ∂gkj
(xi ) . We arrange these vectors
for all training samples into a single matrix ∆k , defined as
∆k = [δk: (x1 ), . . . , δk: (xN )]T ∈ RN ×nk .
In the following we use the Hadamard product ◦, which for
A, B ∈ Rm×n is defined as A ◦ B ∈ Rm×n with (A ◦
B)ij = Aij Bij .
Lemma 2.1 Let σ, l ∈ C 1 (R). Then it holds
(
l0 (FL − Y ) ◦ σ 0 (GL ),
1. ∆k =
T
(∆k+1 Wk+1
) ◦ σ 0 (Gk ),
(
2. ∇Wk Φ =

X T ∆1 ,
k=1
T
Fk−1
∆k , k ∈ [2, L]

k=L
k ∈ [L − 1]

The Loss Surface of Deep and Wide Neural Networks

3. ∇bk Φ = ∆Tk 1N ∀ k ∈ [L]

3. For every k ∈ [1, L], s ∈ [nk ] it holds
N

X ∂Φ ∂gks (xi )
∂Φ
=
∂(bk )s
∂gks (xi ) ∂(bk )s
i=1

Proof:
1. By definition, it holds for every i ∈ [N ], j ∈ [nL ] that

=
(∆L )ij = δLj (xi )
∂Φ
=
∂gLj (xi )

N
X

δks (xi ) = ∆Tk 1N


s

i=1

and hence ∇bk Φ = ∆Tk 1N .

= l0 (fLj (xi ) − yij )σ 0 (gLj (xi ))
= l0 ((FL )ij − Yij )σ 0 ((GL )ij )
0

0

and hence, ∆L = l (FL − Y ) ◦ σ (GL ).
For every k ∈ [L − 1], the chain rule yields for every
i ∈ [N ], j ∈ [nk ] that
(∆k )ij = δkj (xi )
∂Φ
=
∂gkj (xi )
nk+1
X
∂g(k+1)l (xi )
∂Φ
=
∂g(k+1)l (xi ) ∂gkj (xi )
l=1
nk+1

=

X

δ(k+1)l (xi )(Wk+1 )jl σ 0 (gkj (xi ))

l=1
nk+1

=

X

(∆(k+1) )il (Wk+1 )T lj σ 0 ((Gk )ij )

l=1
T
and hence ∆k = (∆k+1 Wk+1
) ◦ σ 0 (Gk ).

2. For every r ∈ [d], s ∈ [n1 ] it holds
N

X ∂Φ ∂g1s (xi )
∂Φ
=
∂(W1 )rs
∂g1s (xi ) ∂(W1 )rs
i=1
=

N
X

δ1s (xi )xir =

i=1
T

N
X

(X T )ri (∆1 )is

i=1

= X ∆1


rs

and hence ∇W1 Φ = X T ∆1 .
For every k ∈ [2, L], r ∈ [nk−1 ], s ∈ [nk ], one obtains
∂Φ
=
∂(Wk )rs
=

N
X

N
X
i=1

∂Φ ∂gks (xi )
∂gks (xi ) ∂(Wk )rs

δks (xi )f(k−1)r (xi ) =

i=1
T
= Fk−1
∆k

N
X
i=1


rs

T
and hence ∇Wk Φ = Fk−1
∆k .

T
(Fk−1
)ri (∆k )is

2
Note that Lemma 2.1 does not apply to non-differentiable
activation functions like the ReLU function, σReLU (x) =
max{0, x}. However, it is known that one can approximate this activation function arbitrarily well by a smooth
function e.g. σα (x) = α1 log(1 + eαx ) (a.k.a. softplus)
satisfies limα→∞ σα (x) = σReLU (x) for any x ∈ R.

3. Main Result
We first discuss some prior work and present then our main
result together with extensive discussion. For improved
readability we postpone the proof of the main result to
the next section which contains several intermediate results
which are of independent interest.
3.1. Previous Work
Our work can be seen as a generalization of the work of
(Gori & Tesi, 1992; Yu & Chen, 1995). While (Yu & Chen,
1995) has shown that for a one-hidden layer network, that
if n1 = N − 1, then every local minimum is a global minimum, the work of (Gori & Tesi, 1992) considered also
multi-layer networks. For the convenience of the reader,
we first restate Theorem 1 of (Gori & Tesi, 1992) using our
previously introduced notation. The critical points of a continuously differentiable function f : Rd → R are the points
where the gradient vanishes, that is ∇f (x) = 0. Note that
this is a necessary condition for a local minimum.
Theorem 3.1 (Gori & Tesi, 1992) Let Φ : P → R be
defined as in (1) with least squares loss l(a) = a2 . As¯ to be continuously differentiable with
sume σ : R → [d, d]
strictly positive derivative and
σ 0 (a)
> 0,
¯
d−σ(a)
a→∞
0
σ (a)
lima→−∞ σ(a)−
d

lim

lima→∞
> 0, lima→−∞

−σ 00 (a)
¯
d−σ(a)
00

σ (a)
σ(a)−d

>0
>0

Then every critical point (Wl , bl )L
l=1 of Φ which satisfies
the conditions
1. rank(Wl ) = nl for all l ∈ [2, L],
2. [X, 1N ]T ∆1 = 0 implies ∆1 = 0

The Loss Surface of Deep and Wide Neural Networks

is a global minimum.
While this result is already for general multi-layer networks, the condition “[X, 1N ]T ∆1 = 0 implies ∆1 = 0” is
the main caveat. It is already noted in (Gori & Tesi, 1992),
that “it is quite hard to understand its practical meaning”
as it requires prior knowledge of ∆1 at every critical point.
Note that this is almost impossible as ∆1 depends on all
the weights of the network. For a particular case, when
the training samples (biases added) are linearly independent, i.e. rank([X, 1N ]) = N , the condition holds automatically. This case is discussed in the following Theorem
3.4, where we consider a more general class of loss and
activation functions.
3.2. First Main Result and Discussion
A function f : Rd → R is real analytic if the corresponding multivariate Taylor series converges to f (x) on an open
subset of Rd (Krantz & Parks, 2002). All results in this
section are proven under the following assumptions on the
loss/activation function and training data.
Assumptions 3.2 1. There are no identical training
samples, i.e. xi 6= xj for all i 6= j,
2. σ is analytic on R, strictly monotonically increasing
and
(a) σ is bounded or
(b) there are positive ρ1 , ρ2 , ρ3 , ρ4 , s.t. |σ(t)| ≤
ρ1 eρ2 t for t < 0 and |σ(t)| ≤ ρ3 t + ρ4 for t ≥ 0
3. l ∈ C 2 (R) and if l0 (a) = 0 then a is a global minimum
These conditions are not always necessary to prove some of
the intermediate results presented below, but we decided to
provide the proof under the above strong assumptions for
better readability. For instance, all of our results also hold
for strictly monotonically decreasing activation functions.
Note that the above conditions are not restrictive as many
standard activation functions satisfy them.
Lemma 3.3 The sigmoid activation function σ1 (t) =
1
1+e−t , the tangent hyperbolic σ2 (t) = tanh(t) and the
softplus function σ3 (t) = α1 log(1 + eαt ) for α > 0 satisfy
Assumption 3.2.
Proof: Note that σ2 (t) = 1+e2−2t − 1. Moreover, it is
1
well known that φ(t) = 1+t
is real-analytic on R+ = {t ∈
R | t ≥ 0}. The exponential function is analytic with values
in (0, ∞). As composition of real-analytic function is realanalytic (see Prop 1.4.2 in (Krantz & Parks, 2002)), we get
that σ1 and σ2 are real-analytic. Similarly, since log(1 + t)
is real-analytic on (−1, ∞) and the composition with the
exponential function is real-analytic, we get that σ3 is a
real-analytic function.

Finally, we note that σ1 ,σ2 , σ3 are strictly monotonically
increasing. Since σ1 ,σ2 are bounded, they both satisfy Assumption 3.2. For σ3 , we note that 1 + eαt ≤ 2eαt for
t ≥ 0, and thus it holds for every t ≥ 0 that
1
log(1 + eαt )
α
1
≤ log(2eαt )
α
log(2)
=
+ t,
α

0 ≤ σ3 (t) =

and with log(1+x) ≤ x for x > −1 it holds log(1+eαt ) ≤
eαt for every t ∈ R. In particular
0 ≤ σ3 (t) ≤

eαt
α

∀t < 0

which implies that σ3 satisfies Assumption 3.2 for ρ1 =
1/α, ρ2 = α, ρ3 = 1, ρ4 = log(2)/α.
2
The conditions on l are satisfied for any twice continuously differentiable convex loss function. A typical example is the squared loss l(a) = a2 or the PseudoHuber
ploss (Hartley & Zisserman, 2004) given as lδ (a) =
2δ 2 ( 1 + a2 /δ 2 − 1) which approximates a2 for small a
and is linear with slope 2δ for large a. But also non-convex
loss functions satisfy this requirement, for instance:
1. Blake-Zisserman: l(a) = − log(exp(−a2 ) + δ) for
δ > 0. For small a, this curve approximates a2 ,
whereas for large a the asymptotic value is − log(δ).
2. Corrupted-Gaussian:
l(a) = − log α exp(−a2 )+(1−α) exp(−a2 /w2 )/w



for α ∈ [0, 1], w > 0. This function computes the
negative log-likehood of a gaussian mixture model.
3. Cauchy: l(a) = δ 2 log(1 + a2 /δ 2 ) for δ 6= 0. This
curve approximates a2 for small a and the value of δ
determines for what range of a this approximation is
close.
We refer to (Hartley & Zisserman, 2004) (p.617-p.619) for
more examples and discussion on robust loss functions.
As a motivation for our main result, we first analyze the
case when the training samples are linearly independent,
which requires N ≤ d+1. It can be seen as a generalization
of Corollary 1 in (Gori & Tesi, 1992).
Theorem 3.4 Let Φ : P → R be defined as in (1) and let
the Assumptions 3.2 hold. If the training samples are linearly independent, that is rank([X, 1N ]) = N , then every
critical point (Wl , bl )L
l=1 of Φ for which the weight matrices (Wl )L
have
full
column rank, that is rank(Wl ) = nl
l=2
for l ∈ [2, L], is a global minimum.

The Loss Surface of Deep and Wide Neural Networks
4

4

4

Pseudo-Huber (
Least Squares

2

0
-8

-6

-4

-2

0

2

4

6

8

2

2

2

-6

-4

-2

0

2

4

6

(a) Blake-Zisserman (δ = 0.1) (b) Corrupted-Gaussian (α =
0.5, w = 6)

0
-8

=1)

-6

-4

-2

0

2

4

6

8

0
-4

(c) Cauchy (δ = 1)

-2

0

2

4

(d) Convex losses

Figure 1. Examples of convex and non-convex loss functions that satisfy Assumption 3.2.

Proof: The proof is based on induction. At a critical point
it holds ∇W1 Φ = X T ∆1 = 0 and ∇b1 Φ = ∆T1 1N = 0
thus [X, 1N ]T ∆1 = 0. By assumption, the data matrix
[X, 1N ]T ∈ R(d+1)×N has full column rank, this implies
∆1 = 0. Using induction, let us assume that ∆k = 0
for some 1 ≤ k ≤ L − 1, then by Lemma 2.1, we have
T
∆k = (∆k+1 Wk+1
) ◦ σ 0 (Gk ) = 0. As by assumption σ 0 is
T
strictly positive, this is equivalent to ∆k+1 Wk+1
= 0 resp.
T
Wk+1 ∆k+1 = 0. As by assumption Wk+1 has full column
rank, it follows ∆k+1 = 0. Finally, we get ∆L = 0. With
Lemma 2.1 we thus get l0 (FL − Y ) ◦ σ 0 (GL ) = 0 which
implies with the same argument as above l0 (FL − Y ) = 0.
From our Assumption 3.2, it holds that if l0 (a) = 0 then
a is a global minimum of l. Thus each individual entry
of (FL − Y ) must represent a global minimum of l. This
combined with (1) implies that the critical point must be a
global minimum of Φ.
2
Theorem 3.4 implies that the weight matrices of potential
saddle points or suboptimal local minima need to have low
rank for one particular layer. Note however that the set
of low rank weight matrices in W has measure zero. At
the moment we cannot prove that suboptimal low rank local minima cannot exist. However, it seems implausible
that such suboptimal low rank local minima exist as every neighborhood of such points contains full rank matrices
which increase the expressiveness of the network. Thus it
should be possible to use this degree of freedom to further
reduce the loss, which contradicts the definition of a local
minimum. Thus we conjecture that all local minima are
indeed globally optimal.
The main restriction in the assumptions of Theorem 3.4 is
the linear independence of the training samples as it requires N ≤ d + 1, which is very restrictive in practice. We
prove in this section a similar guarantee in our main Theorem 3.8 by implicitly transporting this condition to some
higher layer. A similar guarantee has been proven by (Yu
& Chen, 1995) for a single hidden layer network, whereas
we consider general multi-layer networks. The main ingredient of the proof of our main result is the observation in

the following lemma.
Lemma 3.5 Let Φ : P → R be defined as in (1) and let
the Assumptions 3.2 hold. Let (Wl , bl )L
l=1 ∈ P be given.
Assume there is some k ∈ [L − 1] s.t. the following holds
1. rank([Fk , 1N ]) = N
2. rank(Wl ) = nl , l ∈ [k + 2, L]


3. ∇Wk+1 Φ (Wl , bl )L
l=1 = 0


∇bk+1 Φ (Wl , bl )L
l=1 = 0
then (Wl , bl )L
l=1 is a global minimum.
Proof: By Lemma 2.1 it holds that
∇Wk+1 Φ = FkT ∆k+1 = 0,

∇bk+1 Φ = ∆Tk+1 1N = 0,

which implies [Fk , 1N ]T ∆k+1 = 0. By our assumption,
rank([Fk , 1N ]) = N it holds that ∆k+1 = 0. Since
rank(Wl ) = nl , l ∈ [k + 2, L], we can apply a similar
induction argument as in the proof of Theorem 3.4, to arrive at ∆L = 0 and thus a global minimum.
2
The first condition of Lemma 3.5 can be seen as a generalization of the requirement of linearly independent training inputs in Theorem 3.4 to a condition of linear independence of the feature vectors at a hidden layer. Lemma
3.5 suggests that if we want to make statements about the
global optimality of critical points, it is sufficient to know
when and which critical points fulfill these conditions. The
third condition is trivially satisfied by a critical point and
the requirement of full column rank of the weight matrices
is similar to Theorem 3.4. However, the first one may not
be fulfilled since rank([Fk , 1N ]) is dependent not only on
the weights but also on the architecture. The main difficulty
of the proof of our following main theorem is to prove that
this first condition holds under the rather simple requirement that nk ≥ N − 1 for a subset of all critical points.
But before we state the theorem we have to discuss a particular notion of non-degenerate critical point.

The Loss Surface of Deep and Wide Neural Networks

Definition 3.6 (Block Hessian) Let f : D → R be a
twice-continuously differentiable function defined on some
open domain D ⊆ Rn . The Hessian w.r.t. a subset of variables S ⊆ {x1 , . . . , xn } is denoted as ∇2S f (x) ∈ R|S|×|S| .
When |S| = n, we write ∇2 f (x) ∈ Rn×n to denote the full
Hessian matrix.
We use this to introduce a slightly more general notion of
non-degenerate critical point.
Definition 3.7 (Non-degenerate critical point) Let f :
D → R be a twice-continuously differentiable function defined on some open domain D ⊆ Rn . Let x ∈ D be a
critical point, i.e. ∇f (x) = 0, then
• x is non-degenerate for a subset of variables S ⊆
{x1 , . . . , xn } if ∇2S f (x) is non-singular.
• x is non-degenerate if ∇2 f (x) is non-singular.
Note that a non-degenerate critical point might not be nondegenerate for a subset of variables, and vice versa, if it is
non-degenerate on a subset of variables it does not necessarily imply non-degeneracy on the whole set. For instance,
1 0
0 1
∇ f (x) =
0 0
0 0
2

0
0
0
0

0
0
,
0
0

1 0
0 1
∇ f (y) =
1 0
0 1
2

1
0
0
0

0
1
0
0

Clearly, det ∇2 f (x) = 0 but det ∇2{x1 ,x2 } f (x) 6= 0, and
det ∇2 f (y) 6= 0 but det ∇2{y3 ,y4 } f (y) = 0. The concept
of non-degeneracy on a subset of variables is crucial for
the following statement of our main result.
Theorem 3.8 Let Φ : P → R be defined as in (1) and let
the Assumptions 3.2 hold. Suppose nk ≥ N − 1 for some
k ∈ [L − 1]. Then every critical point (Wl∗ , b∗l )L
l=1 of Φ
which satisfies the following conditions
1. (Wl∗ , b∗l )L
l=1 is non-degenerate on {(Wl , bl ) | l ∈ I},
for some subset I ⊆ {k + 1, . . . , L} satisfying
{k + 1} ∈ I,
∗
2. (Wl∗ )L
l=k+2 has full column rank, that is, rank(Wl ) =
nl for l ∈ [k + 2, L],

is a global minimum of Φ.
First of all we note that the full column rank condition of
(Wl )L
l=k+2 in Theorem 3.4, and 3.8 implicitly requires that
nk+1 ≥ nk+2 ≥ . . . ≥ nL . This means the network needs
to have a pyramidal structure from layer k + 2 to L. It is
interesting to note that most modern neural network architectures have a pyramidal structure from some layer, typically the first hidden layer, on. Thus this is not a restrictive

requirement. Indeed, one can even argue that Theorem 3.8
gives an implicit justification as it hints on the fact that such
networks are easy to train if one layer is sufficiently wide.
Note that Theorem 3.8 does not require fully nondegenerate critical points but non-degeneracy is only
needed for some subset of variables that includes layer
k + 1. As a consequence of Theorem 3.8, we get directly a
stronger result for non-degenerate local minima.
Corollary 3.9 Let Φ : P → R be defined as in (1) and let
the Assumptions 3.2 hold. Suppose nk ≥ N − 1 for some
k ∈ [L − 1]. Then every non-degenerate local minimum
∗ L
(Wl∗ , b∗l )L
l=1 of Φ for which (Wl )l=k+2 has full column
∗
rank, that is rank(Wl ) = nl , is a global minimum of Φ.
Proof: The Hessian at a non-degenerate local minimum is
positive definite and every principal submatrix of a positive
definite matrix is again positive definite, in particular for
the subset of variables (Wl , bl )L
l=k+1 . Then application of
Theorem 3.8 yields the result.
2

Let us discuss the implications of these results. First, note
that Theorem 3.8 is slightly weaker than Theorem 3.4 as it
requires also non-degeneracy wrt to a set of variables including layer k + 1. Moreover, similar to Theorem 3.4 it
does not exclude the possibility of suboptimal local minima of low rank in the layers “above” layer k + 1. On the
other hand it makes also very strong statements. In fact, if
nk ≥ N − 1 for some k ∈ [L − 1] then even degenerate
saddle points/local maxima are excluded as long as they
are non-degenerate with respect to any subset of parameters of upper layers that include layer k + 1 and the rank
condition holds. Thus given that the weight matrices of the
upper layers have full column rank , there is not much room
left for degenerate saddle points/local maxima. Moreover,
for a one-hidden-layer network for which n1 ≥ N − 1,
every non-degenerate critical point with respect to the output layer parameters is a global minimum, as the full rank
condition is not active for one-hidden layer networks.
Concerning the non-degeneracy condition of main Theorem 3.8, one might ask how likely it is to encounter degenerate points of a smooth function. This is answered by an
application of Sard’s/Morse theorem in (Milnor, 1965).
Theorem 3.10 (A. Morse, p.11) If f : U ⊂ Rd → R is
twice continuously differentiable. Then for almost all w ∈
Rd with respect to the Lebesgue measure it holds that f 0
defined as f 0 (x) = f (x) + hw, xi has only non-degenerate
critical points.
Note that the theorem would still hold if one would draw
w uniformly at random from the set {z ∈ Rd | kzk2 ≤ }
for any  > 0. Thus almost every linear perturbation f 0 of

The Loss Surface of Deep and Wide Neural Networks

a function f will lead to the fact all of its critical points are
non-degenerate. Thus, this result indicates that exact degenerate points might be rare. Note however that in practice the Hessian at critical points can be close to singular
(at least up to numerical precision), which might affect the
training of neural networks negatively (Sagun et al., 2016).
As we argued for Theorem 3.4 our main Theorem 3.8 does
not exclude the possibility of suboptimal degenerate local
minima or suboptimal local minima of low rank. However,
we conjecture that the second case cannot happen as every neighborhood of the local minima contains full rank
matrices which increase the expressiveness of the network
and this additional flexibility can be used to reduce the loss
which contradicts the definition of a local minimum.
As mentioned in the introduction the condition nk ≥ N −1
looks at first sight very strong. However, as mentioned in
the introduction, in practice often networks are used where
one hidden layer is rather wide, that is nk is on the order of
N (typically it is the first layer of the network). As the condition of Theorem 3.8 is sufficient and not necessary, one
can expect out of continuity reasons that the loss surface of
networks where the condition is approximately true, is still
rather well behaved, in the sense that still most local minima are indeed globally optimal and the suboptimal ones
are not far away from the globally optimal ones.

4. Proof of Main Result
For better readability, we first prove our main Theorem 3.8
for a special case where I is the whole set of upper layers,
i.e. I = {k + 1, . . . , L} , and then show how to extend
the proof to the general case where I ⊆ {k + 1, . . . , L} .
Our proof strategy is as follows. We first show that the
output of each layer are real analytic functions of network
parameters. Then we prove that there exists a set of parameters such that rank([Fk , 1N ]) = N. Using properties of real analytic functions, we conclude that the set
of parameters where rank([Fk , 1N ]) < N has measure
zero. Then with the non-degeneracy condition, we can apply the implicit-function theorem to conclude that even if
rank([Fk , 1N ]) = N is not true at a critical point, then still
in any neighborhood of it there exists a point where the
conditions of Lemma 3.5 are true and the loss is minimal.
By continuity of Φ, this implies that the loss must also be
minimal at the critical point.
We introduce some notation frequently used in the proofs.
Let B(x, r) = {z ∈ Rd | kx − zk2 < r} be the open ball
in Rd of radius r around x.
Lemma 4.1 If the Assumptions 3.2 hold, then the output of
each layer fl for every l ∈ [L] are real analytic functions
of the network parameters on P.

Proof:
Any linear function is real analytic and the
set of real analytic functions is closed under addition,
multiplication and composition, see e.g. Prop. 2.2.2 and
Prop. 2.2.8 in (Krantz & Parks, 2002). As we assume
that the activation function is real analytic, we get that
all the output functions of the neural network fk are real
analytic functions of the parameters as compositions of
real analytic functions.
2

The concept of real analytic functions is important in our
proofs as these functions can never be “constant” in a set of
the parameter space which has positive measure unless they
are constant everywhere. This is captured by the following
lemma.
Lemma 4.2 (Nguyen, 2015; Mityagin, 2015) If f : Rn →
R is a real analytic function which is not identically zero
then the set {x ∈ Rn | f (x) = 0} has Lebesgue measure
zero.
In the next lemma we show that there exist network parameters such that rank([Fk , 1N ]) = N holds if nk ≥ N − 1.
Note that this is only possible due to the fact that one uses
non-linear activation functions. For deep linear networks,
it is not possible for Fk to achieve maximum rank if the
layers below it are not sufficiently wide. To see this, one
considers Fk = Fk−1 Wk + 1N bTk for a linear network,
then rank(Fk ) ≤ min{rank(Fk−1 ), rank(Wk )} + 1 since
the addition of a rank-one term does not increase the rank
of a matrix by more than one. By using induction, one gets
rank(Fk ) ≤ rank(Wl ) + k − l + 1 for every l ∈ [k].
The existence of network parameters where
rank([Fk , 1N ]) = N together with the previous lemma
will then be used to show that the set of network parameters
where rank([Fk , 1N ]) < N has measure zero.
Lemma 4.3 If the Assumptions 3.2 hold and nk ≥ N − 1
for some k ∈ [L − 1], then there exists at least one set of
parameters (Wl , bl )kl=1 such that rank([Fk , 1N ]) = N.
Proof: We first show by induction that there always exists a set of parameters (Wl , bl )k−1
l=1 s.t. Fk−1 has distinct
rows. Indeed, we have F1 = σ(XW1 + 1N bT1 ). The set of
(W1 , b1 ) that makes F1 to have distinct rows is characterized by
σ(W1T xi + b1 ) 6= σ(W1T xj + b1 ),

∀i 6= j.

Note, that σ is strictly monotonic and thus bijective on its
domain. Thus this is equivalent to
W1T (xi − xj ) 6= 0,

∀i 6= j.

Let us denote the first column of W1 by a, then the exis-

The Loss Surface of Deep and Wide Neural Networks

tence of a for which
aT (xi − xj ) 6= 0,

∀i 6= j,

(2)

would imply the result. Note that by assumption xi 6= xj
for all i 6= j. Then the set {a ∈ Rd | aT (xi − xj ) = 0} is a
hyperplane, which has measure zero and thus the set where
condition (2) fails corresponds to the union of N (N2−1) hyperplanes which again has measure zero. Thus there always
exists a vector a such that condition (2) is satisfied and thus
there exists (W1 , b1 ) such that the rows of F1 are distinct.
Now, assume that Fp−1 has distinct rows for some p ≥ 1,
then by the same argument as above we need to construct
Wp such that


WpT fp−1 (xi ) − fp−1 (xj ) 6= 0, ∀i 6= j.
By construction fp−1 (xi ) 6= fp−1 (xj ) and thus with the
same argument as above we can choose Wp such that this
condition holds. As a result, there exists a set of parameters
(Wl , bl )k−1
l=1 so that Fk−1 has distinct rows.
Now, given that Fk−1 has distinct rows, we show how
to construct (Wk , bk ) in such a way that [Fk , 1N ] ∈
RN ×(nk +1) has full row rank. Since nk ≥ N − 1,
it is sufficient to make the first N − 1 columns of Fk
together with the all-ones vector become linearly independent. In particular, let Fk = [A, B] where A ∈
RN ×(N −1) and B ∈ RN ×(nk −N +1) be the matrices containing outputs of the first (N − 1) hidden units and last
(nk − N + 1) hidden units of layer k respectively. Let
Wk = [w1 , . . . , wN −1 , wN , . . . , wnk ] ∈ Rnk−1 ×nk and
bk = [v1 , . . . , vN −1 , vN , . . . , vnk ] ∈ Rnk . Let Z =
Fk−1 = [z1 , . . . , zN ]T ∈ RN ×nk−1 with zi 6= zj for every i 6= j. By definition of Fk , it holds Aij = σ(ziT wj +
vj ) for i ∈ [N ], j ∈ [N − 1]. As mentioned above,
−1
we just need to show there exists (wj , vj )N
j=1 so that
rank([1N , A]) = N because then it will follow immediately that rank([Fk , 1N ]) = N. Pick any a ∈ Rnk−1
satisfying potentially after reordering w.l.o.g. ha, z1 i <
ha, z2 i < . . . < ha, zN i. By the discussion above such a
vector always
S exists since the complementary set is contained in i6=j {a ∈ Rnk−1 | hzi − zj , ai = 0} which has
measure zero.
We first prove the result for the case where σ is bounded.
Since σ is bounded and strictly monotonically increasing,
there exist two finite values γ, µ ∈ R with µ < γ s.t.
lim σ(α) = µ

α→−∞

and

lim σ(α) = γ.

α→+∞

Moreover, since σ is strictly monotonically increasing it
holds for every β ∈ R, σ(β) > µ. Pick some β ∈ R. For
α ∈ R, we define wj = −αa, vj = αzjT a + β for every
j ∈ [N − 1]. Note that the matrix A changes as we vary
α. Thus, we consider a family of matrices A(α) defined as

A(α)ij = σ(ziT wj + vj ) = σ(α(zj − zi )T a + β). Then it
holds for every i ∈ [N ], j ∈ [N − 1]


j>i
γ
lim A(α)ij = σ(β) j = i
α→+∞


µ
j<i
Let E(α) = [1N , A(α)] then it holds

1
j=1



µ
j ∈ [2, N ], i ≥ j
lim E(α)ij =
α→+∞

σ(β)
j
=i+1



γ
else
Let Ê(α) be a modified matrix where one subtracts every
row i by row (i − 1) of E(α), in particular, let
(
E(α)ij
i = 1, j ∈ [N ]
Ê(α)ij =
(3)
E(α)ij − E(α)i−1,j i > 1, j ∈ [N ]
then it holds


1
lim Ê(α)ij = µ − σ(β) < 0
α→+∞


0

i=j=1
i=j>1
i>j

We do not show the values of other entries as what matters
is that the limit, lim Ê(α), is an upper triangular matrix.
α→+∞

Thus, the determinant is equal to the product of its diagonal entries which is non-zero. Note that the determinant of
Ê(α) is the same as that of E(α) as subtraction of some
row from some other row does not change the determinant,
and thus we get that lim E(α) has full rank N . As the
α→+∞

determinant of E(α) is a polynomial of its entries and thus
continuous in α, there exists α0 ∈ R s.t. for every α ≥ α0
it holds rank(E(α)) = rank([1N , A(α)]) = N. Moreover,
since A is chosen as the first (N − 1) columns of Fk , one
can always choose the weights of the first (N − 1) hidden
units of layer k so that rank([Fk , 1N ]) = N .
In the case where the activation function fulfills |σ(t)| ≤
ρ1 eρ2 t for t < 0 and |σ(t)| ≤ ρ3 t + ρ4 for t ≥ 0 we
consider directly the determinant of the matrix E(α). In
particular, let us pick some β ∈ R such that σ(β) 6=
0. We consider the family of matrices A(α) defined as
A(α)ij = σ(ziT wj + vj ) = σ(α(zj − zi )T a + β) where
wj = −αa, vj = αzjT a + β for every j ∈ [N − 1]. Let
E(α) = [A(α), 1N ]. Note that the all-ones vector is now
situated at the last column of E(α) instead of first column
as before. This column re-ordering does not change the
rank of E(α). By the Leibniz-formula one has
det(E(α)) =

X
π∈SN

sign(π)

N
−1
Y
j=1

E(α)π(j)j ,

The Loss Surface of Deep and Wide Neural Networks

where SN is the set of all N ! permutations of the set
{1, . . . , N } and we used the fact that the last column of
E(α) is equal to the all ones vector. Define the permutation γ as γ(j) = j for j ∈ [N ]. Then we have
det(E(α))
= sign(γ)σ(β)N −1 +

X

sign(π)

N
−1
Y

E(α)π(j)j .

j=1

π∈SN \{γ}

QN −1
The idea now is to show that j=1 E(α)π(j)j goes to zero
for every permutation π 6= γ as α goes to infinity. And
since the whole summation goes to zero while σ(β) 6= 0,
the determinant would be non-zero as desired. With that,
we first note that for any permutation π 6= γ there has to
be at least one component π(j) where π(j) > j, in which
case, δj = (zj − zπ(j) )T a < 0 and thus for sufficiently
large α, it holds αδj + β < 0. Thus
|E(α)π(j)j | = |σ(α(zj −zπ(j) )T a+β)| ≤ ρ1 eρ2 β e−αρ2 |δj | .
If π(j) = j then E(α)π(j)j = σ(β). In cases where π(j) <
j(j 6= N ) it holds that δj = (zj − zπ(j) )T a > 0 and thus
for sufficiently large α, it holds αδj + β > 0 and we have
|E(α)π(j)j | = |σ(α(zj −zπ(j) )T a+β)| ≤ ρ3 δj α+ρ3 β+ρ4 .
So far, we have shown that |E(α)π(j)j | can always be
upper-bounded by an exponential function resp. affine
function of α when π(j) > j resp. π(j) < j or it is just
a constant when π(j) = j. The above observations imply
that there exist positive constants P, Q, R, S, T such that it
holds for every π ∈ SN \ {γ} ,

As α → ∞ the upper bound goes to zero. As there are only
finitely many such terms, we get
lim det(E(α)) = sign(γ)σ(β)

Corollary 4.5 If the Assumptions 3.2 hold and nk ≥ N −1
for some k ∈ [L − 1], then for any given (Wl0 , b0l )kl=1 and
k
for every  > 0, there exists at least one Wl , bl l=1 ∈


k
B Wl0 , b0l l=1 ,  s.t. rank([Fk , 1N ]) = N.
n
o
k 
Proof: Let S :=
Wl , bl l=1  rank([Fk , 1N ]) < N .


k
The ball B Wl , bl l=1 ,  has positive Lebesgue measure while S has measure zero
 4.4. Thus,
 due to Lemma
k
0 0 k
for every Wl , bl l=1 ∈ B Wl , bl l=1 ,  \ S it holds
2

The final proof of our main Theorem 3.8 is heavily based
on the implicit function theorem, see e.g. (Marsden, 1974).

j=1

α→∞

We conclude that for nk ≥ N − 1 even if there are network parameters such that rank([Fk , 1N ]) < N , then every
neighborhood of these parameters contains network parameters such that rank([Fk , 1N ]) = N.

rank([Fk , 1N ]) = N.

−1

 NY


E(α)π(j)j  ≤ R(P α + Q)S e−αT .


N −1

matrices Ek can be characterized by a system of equations
such that the nkN+1 determinants of all N × N submatrices of Ek are zero. As the determinant is a polynomial in
the entries of the matrix and thus an analytic function of
the entries and composition of analytic functions are again
analytic, we conclude that each determinant is an analytic
function of the network parameters of the first k layers. By
Lemma 4.3 there exists at least one set of network parameters of the first k layers such that one of these determinant
functions is not identically zero and thus by Lemma 4.2 the
set of network parameters where this determinant is zero
has measure zero. But as all submatrices need to have low
rank in order that rank([Fk , 1N ]) < N , it follows that the
set of network parameters where rank([Fk , 1N ]) < N has
measure zero.
2

6= 0,

and thus with the same argument as before we can argue
that there exists a finite α0 for which E(α) has full rank.
2
Now we combine the previous lemma with Lemma 4.2 to
conclude the following.
Lemma 4.4 If the Assumptions 3.2 hold and nk ≥
N − 1 for some
k ∈ [L − 1] othen the set S :=
n
k 
Wl , bl l=1  rank([Fk , 1N ]) < N has Lebesgue measure zero.
Proof: Let Ek = [Fk , 1N ] ∈ RN ×(nk +1) . Note that with
Lemma 4.1 the output Fk of layer k is an analytic function of the network parameters on P. The set of low rank

Theorem 4.6 Let Ψ : Rs × Rt → Rt be a continuously
differentiable function. Suppose (u0 , v0 ) ∈ Rs × Rt and
Ψ(u0 , v0 ) = 0. If the Jacobian matrix w.r.t. v,

 ∂Ψ1
1
· · · ∂Ψ
∂v1
∂vt

..  ∈ Rt×t
Jv Ψ(u0 , v0 ) =  ...
. 
∂Ψt
∂Ψt
· · · ∂vt
∂v1
is non-singular at (u0 , v0 ), then there is an open ball
B(u0 , ) for some  > 0 and a unique function α :
B(u0 , ) → Rt such that Ψ(u, α(u)) = 0 for all u ∈
B(u0 , ). Furthermore, α is continuously differentiable.
With all the intermediate results proven above, we are finally ready for the proof of the main result.
Proof of Theorem 3.8 for case I = {k + 1, . . . , L}
Let us divide the set of all parameters of the network

The Loss Surface of Deep and Wide Neural Networks

into two subsets where one corresponds to all parameters of all layers up to k, for that we denote u =
[vec(W1 )T , bT1 , . . . , vec(Wk )T , bTk ]T , and the other corresponds to the remaining parameters, for that we denote
v = [vec(Wk+1 )T , bTk+1 , . . . , vec(WL )T , bTL ]T . By abuse


of notation, we write Φ(u, v) to denote Φ (Wl , bl )L
l=1 .
Let s = dim(u), t = dim(v) and (u∗ , v ∗ ) ∈ Rs ×Rt be the
corresponding vectors for the critical point (Wl∗ , b∗l )L
l=1 .
Let Ψ : Rs × Rt → Rt be a map defined as Ψ(u, v) =
∇v Φ(u, v) ∈ Rt , which is the gradient mapping of Φ
w.r.t. all parameters of the upper layers from (k + 1) to
L. Since the gradient vanishes at a critical point, it holds
that Ψ(u∗ , v ∗ ) = ∇v Φ(u∗ , v ∗ ) = 0. The Jacobian of Ψ
w.r.t. v is the principal submatrix of the Hessian of Φ w.r.t.
v, that is, Jv Ψ(u, v) = ∇2v Φ(u, v) ∈ Rt×t . As the critical point is assumed to be non-degenerate with respect
to v, it holds that Jv Ψ(u∗ , v ∗ ) = ∇2v Φ(u∗ , v ∗ ) is nonsingular. Moreover, Ψ is continuously differentiable since
Φ ∈ C 2 (P) due to Assumption 3.2. Therefore, Ψ and
(u∗ , v ∗ ) satisfy the conditions of the implicit function theorem 4.6. Thus there exists an open ball B(u∗ , δ1 ) ⊂ Rs
for some δ1 > 0 and a continuously differentiable function
α : B(u∗ , δ1 ) → Rt such that
(
Ψ(u, α(u)) = 0, ∀ u ∈ B(u∗ , δ1 )
α(u∗ ) = v ∗
By assumption we have rank(Wl∗ )

= nl , l ∈ [k+2, L], that
is the weight matrices of the “upper” layers have full column rank. Note that (Wl∗ )L
l=k+2 corresponds to the weight
∗
. Thus there
matrix part of v ∗ where one leaves out Wk+1
exists a sufficiently small  such that for any v ∈ B(v ∗ , ),
the weight matrix part (Wl )L
l=k+2 of v has full column
rank. In particular, this, combined with the continuity of
α, implies that for a potentially smaller 0 < δ2 ≤ δ1 , it
holds for all u ∈ B(u∗ , δ2 ) that
∗

∗

Ψ(u, α(u)) = 0, α(u ) = v ,
t
and that the weight matrix part (Wl )L
l=k+2 of α(u) ∈ R
has full column rank.

Now, by Corollary 4.5 for any 0 < δ3 ≤ δ2 there exists a
ũ ∈ B(u∗ , δ3 ) such that the generated output matrix F̃k at
layer k of the corresponding network parameters of ũ satisfies rank([F˜k , 1N ]) = N. Moreover, it holds for ṽ = α(ũ)
that Ψ(ũ, ṽ) = 0 and the weight matrix part (W̃l )L
l=k+2 of
ṽ has full column rank. Assume (ũ, ṽ) corresponds to the
following representation
(
ũ = [vec(W̃1 )T , b̃T1 , . . . , vec(W̃k )T , b̃Tk ]T ∈ Rs
ṽ = [vec(W̃k+1 )T , b̃Tk+1 , . . . , vec(W̃L )T , b̃TL ]T ∈ Rt

We obtain the following



˜l )k

Ψ(ũ,
ṽ)
=
0
⇒
∇
Φ
(
W̃
,
b
=0
W
l
k+1
l=1






k
Ψ(ũ, ṽ) = 0 ⇒ ∇bk+1 Φ (W̃l , b˜l )l=1 = 0


rank(W̃l ) = nl , ∀ l ∈ [k + 2, L]


rank([F˜k , 1N ]) = N
˜ L
Thus, Lemma 3.5 implies
 that (W̃l , bl )l=1 is a global minimum of Φ. Let p∗ = Φ (W̃l , b̃l )L
l=1 = Φ(ũ, ṽ). Note that

this construction can be done for any δ3 ∈ (0, δ2 ]. In particular, let (γr )∞
r=1 be a strictly monotonically decreasing
sequence such that γ1 = δ3 and limr→∞ γr = 0. By Corollary 4.5 and the previous argument, we can choose for any
γr > 0 a point u˜r ∈ B(u∗ , γr ) such that ṽr = α(ũr ) has
full rank and Φ(ũr , ṽr ) = p∗ . Moreover, as limr→∞ γr =
0, it follows that limr→∞ ũr = u∗ and as α is a continuous function, it holds with ṽr = α(ũr ) that limr→∞ ṽr =
limr→∞ α(ũr ) = α(limr→∞ ũr ) = α(u∗ ) = v ∗ . Thus we
get limr→∞ (ũr , ṽr ) = (u∗ , v ∗ ) and as Φ is a continuous
function it holds


lim Φ (ũr , ṽr ) = Φ(u∗ , v ∗ ) = p∗ ,
r→∞

as Φ attains the global minimum for the whole sequence
(ũr , ṽr ).
Proof of Theorem 3.8 for general case
In the general case I ⊆ {k + 1, . . . , L}, the previous proof
can be easily adapted. The idea is that we fix all layers in
{k + 1, . . . , L} \ I. In particular, let
(
u = [vec(W1 )T , bT1 , . . . , vec(Wk )T , bTk ]T
v = [vec(WI(1) )T , bTI(1) , . . . , vec(WI(|I|) )T , bTI(|I|) ]T .
Let s = dim(u), t = dim(v) and (u∗ , v ∗ ) ∈ Rs ×Rt be the
s
t
corresponding vectors at (Wl∗ , b∗l )L
l=1 . Let
 Ψ : R ×R →
Rt be a map defined as Ψ(u, v) = ∇v Φ (Wl , bl )L
l=1 with


Ψ(u∗ , v ∗ ) = ∇v Φ (Wl∗ , b∗l )L
l=1 = 0.

The only difference is that all the layers from
{k + 1, . . . , L} \ I are hold fixed. They are not contained in the arguments of Ψ, thus will not be involved in
our perturbation analysis. In this way, the full rank property of the weight matrices of these layers are preserved,
which is needed to obtain the global minimum.

5. Relaxing the Condition on the Number of
Hidden Units
We have seen that nk ≥ N − 1 is a sufficient condition which leads to a rather simple structure of the critical
points, in the sense that all local minima which have full

The Loss Surface of Deep and Wide Neural Networks

rank in the layers k + 2 to L and for which the Hessian is
non-degenerate on any subset of upper layers that includes
layer k + 1 are automatically globally optimal. This suggests that suboptimal locally optimal points are either completely absent or relatively rare. We have motivated before
that networks with a certain wide layer are used in practice, which shows that the condition nk ≥ N − 1 is not
completely unrealistic. On the other hand we want to discuss in this section how it could be potentially relaxed. The
following result will provide some intuition about the case
nk < N − 1, but will not be as strong as our main result
3.8 which makes statements about a large class of critical
points. The main idea is that with the condition nk ≥ N −1
the data is linearly separable at layer k. As modern neural
networks are expressive enough to represent any function,
see (Zhang et al., 2017) for an interesting discussion on
this, one can expect that in some layer the training data becomes linearly separable. We prove that any critical point,
for which the “learned” network outputs at any layer are
linearly separable (see Definition 5.1) is a global minimum
of the training error.
Definition 5.1 (Linearly separable vectors) A set of vecd
m
tors (xi )N
i=1 ∈ R from m classes (Cj )j=1 is called lind
early separable if there exist m vectors (aj )m
j=1 ∈ R and
m
T
m scalars (bj )j=1 ∈ R so that aj xi + bj > 0 for xi ∈ Cj
and aTj xi + bj < 0 for xi ∈
/ Cj for every i ∈ [N ], j ∈ [m].
In this section, we use a slightly different loss function than
in the previous section. The reason is that the standard least
squares loss is not necessarily small when the data is linearly separable. Let C1 , . . . , Cm denote m classes. We
consider the objective function Φ : P → R from (1)
m
N X

 X

Φ (Wl , bl )L
l fLj (xi ) − yij
=
l=1

(4)

i=1 j=1

where the loss function now takes the new form
(


l1 fLj (xi ) − yij
xi ∈ Cj

l fLj (xi ) − yij =
l2 fLj (xi ) − yij
xi ∈
/ Cj
where l1 , l2 penalize the deviation from the label encoding
for the true class resp. wrong classes. We assume that the
minimum of Φ is attained over P. Note that Φ is bounded
from below by zero as l1 and l2 are non-negative loss functions. The results of this section are made under the following assumptions on the activation and loss function.
Assumptions 5.2 1. σ ∈ C 1 (R) and strictly monotonically increasing.
2. l1 : R → R+ , l1 ∈ C 1 , l1 (a) = 0 ⇔ a ≥ 0, l10 (a) =
0 ⇔ a ≥ 0 and l10 (a) < 0 ∀ a < 0

l1

l2

Figure 2. An example of l1 , l2 .

3. l2 : R → R+ , l2 ∈ C 1 , l2 (a) = 0 ⇔ a ≤ 0, l20 (a) =
0 ⇔ a ≤ 0 and l20 (a) > 0 ∀ a > 0
In classification tasks, this loss function encourages higher
values for the true class and lower values for wrong classes.
An example of the loss function that satisfies Assumption
5.2 is given as (see Figure 2):
(
(
a2 a ≤ 0
0 a≤0
l2 (a) =
l1 (a) =
0 a≥0
a2 a ≥ 0
Note that for a {+1, −1}-label encoding, +1 for the true
class and −1 for all wrong classes, one can rewrite (4) as
m
N X

 X
max{0, 1 − yij fLj (xi )}2 ,
Φ (Wl , bl )L
=
l=1
i=1 j=1

which is similar to the truncated squared loss (also called
squared hinge loss) used in the SVM for binary classification. Since σ and l are continuously differentiable, all the
results from Lemma 2.1 still hold.
Our main result in this section is stated as follows.
Theorem 5.3 Let Φ : P → R+ be defined as in (4) and let
the Assumptions 5.2 hold. Then it follows:
1. Every critical point of Φ for which the feature vectors
contained in the rows of Fk are linearly separable and
all the weight matrices (Wl )L
l=k+2 have full column
rank is a global minimum.
2. If the training inputs are linearly separable then every
critical point of Φ for which all the weight matrices
(Wl )L
l=2 have full column rank is a global minimum.
Proof:
1. Let F˜k = [Fk , 1N ]. Since Fk contains linearly
separable feature vectors, there exists m vectors
h1 , . . . , hm ∈ Rnk +1 s.t. hhj , (F˜k )i: i > 0 for
xi ∈ Cj and hhj , (F˜k )i: i < 0 for xi ∈
/ Cj . Let
H = [h1 , . . . , hm ] ∈ R(nk +1)×m , one obtains
(
> 0 xi ∈ Cj
T ˜ T
(H Fk )ji = hhj , (F˜k )i: i
.
< 0 xi ∈
/ Cj

The Loss Surface of Deep and Wide Neural Networks

On the other hand,

of matrices is a non-zero matrix, there must exist a
non-zero column, say p ∈ [nL−1 ], then

(∆L )ij = δLj (xi )
∂Φ
∂gLj (xi )
(
l0 (fLj (xi ) − yij )σ 0 (gLj (xi ))
= 10
l2 (fLj (xi ) − yij )σ 0 (gLj (xi ))

T
0 6= H T F˜k

=

xi ∈ Cj
xi ∈
/ Cj

T

i=1

N
X
T
(H T F˜k )ji (∆L )ij



∆L WLT


:p

Since iL−1 is arbitrary, pick iL−1 = p one obtains
0 6= H T F˜k

T

 L−2
Y




Σlil ΣpL−1 ∆L WLT
:p
l=k+1
{z
}
|

(7)

(∆L−1 ):p

Moreover, it holds for every i ∈ [N ]

 
ΣpL−1 ∆L WLT :p
i

= σ 0 (g(L−1)p (xi ))

i=1

E
X D
=
(F˜k )i,: , hj l10 (fLj (xi ) − yij )σ 0 (gLj (xi ))
i

xi ∈Cj

E
X D
(F˜k )i,: , hj l20 (fLj (xi ) − yij )σ 0 (gLj (xi )) ≤ 0

nL
X

δLj (xi )(WL )pj

j=1

= δ(L−1)p (xi )

= ∆L−1 ip
and thus from (7),

i

xi ∈C
/ j

Note that under the assumptions on the loss and activation function and since the features are separable,
the terms in both sums are non-positive and thus the
sum can only vanish if all terms vanish which implies
(

l10 fLj (xi ) − yij = 0 xi ∈ Cj

∀i ∈ [N ], j ∈ [m]
l20 fLj (xi ) − yij = 0 xi ∈
/ Cj
(5)
which yields ∆L = 0.
Back to the main proof, the idea is to prove that
∆L = 0 at the given critical point. Let us assume for the sake of contradiction that ∆L 6=
0. For every l ∈ [L], il ∈ [nl ] define Σlil =
diag(σ 0 (glil (x1 )), . . . , σ 0 (glil (xN ))). Since the cuQL−1
mulative product l=k+1 Σlil is a N ×N diagonal matrix which contains only positive entries in its diagonal, it does not change the sign pattern of ∆L , and thus
T
it holds with, H T F˜k ∆L = 0 if and only if ∆L = 0,
for every (ik+1 , . . . , iL−1 ) ∈ [nk+1 ] × . . . × [nL−1 ]
that
T
0 6= H T F˜k

 L−1
Y


Σlil ∆L

(6)

l=k+1

0 6= H T F˜k

Σlil

l=k+1

We show that H T F˜k ∆L = 0 if and only if ∆L = 0.
Indeed, if ∆L = 0 the implication is trivial. For the
T
other direction, assume that H T F˜k ∆L = 0. Then it
T
holds for every j ∈ [m] that 0 = (H T F˜k ∆L )jj =
PN
T
(H T F˜k )ji (∆L )ij . In particular,

+

 L−1
Y

 L−1
Y
T



Σlil ∆L WLT

0 6= H T F˜k

T

 L−2
Y


Σlil (∆L−1 ):p

l=k+1

⇒ 0 6= H T F˜k

T

 L−2
Y


Σlil ∆L−1

l=k+1

Compared
toQ(6), we have reduced the product from
QL−1
L−2
to
l=k+1
l=k+1 , By induction, one can easily
show that
T
0 6= H T F˜k Σk+1
ik+1 ∆k+2
T

and hence 0 6= H T F˜k ∆k+1 , which implies 0 6=
T
F˜k ∆k+1 = [(∇Wk+1 )T Φ, ∇bk+1 Φ]T . However, this
is a contradiction to the fact that we assumed that
(Wl , bl )L
l=1 is a critical point. Thus it follows that it
has to hold ∆L = 0. As ∆L = 0 it holds (5) which
implies
(
fLj (xi ) ≥ yij xi ∈ Cj
∀ i ∈ [N ], j ∈ [m].
fLj (xi ) ≤ yij xi ∈
/ Cj


This in turn implies Φ (Wl , bl )L
= 0. Thus the
l=1
critical point (Wl , bl )L
l=1 is a global minimum.

(rank(WL ) = nL ),

l=k+1

where the last inequality is implied by (6) as WL has
full column rank nL = m. Since the above product

2. This can be seen as a special case of the first statement.
In particular, assume one has a zero-layer which coincides with the training inputs, namely F0 = X, then
the result follows immediately.

The Loss Surface of Deep and Wide Neural Networks

2

In NIPS, 2014.

Note that the second statement of Theorem 5.3 can be considered as a special case of the first statement. In the case
where L = 2 and training inputs are linearly separable, the
second statement of our Theorem 5.3 recovers the similar
result of (Gori & Tesi, 1992; Frasconi et al., 1997) for onehidden layer networks.

Baldi, P. and Hornik, K. Neural networks and principle
component analysis: Learning from examples without
local minima. Neural Networks, 2:53–58, 1988.

Even though the assumptions of Theorem 3.4 and Theorem 5.3 are different in terms of class of activation and loss
functions, their results are related. In fact, it is well known
that if a set of vectors is linearly independent then they are
linearly separable, see e.g. p.340 (Barber, 2012). Thus
Theorem 5.3 can be seen as a direct generalization of Theorem 3.4. The caveat, which is also the main difference to
Theorem 3.8, is that Theorem 5.3 makes only statements
for all the critical points for which the problem has become
separable at some layer, whereas there is no such condition
in Theorem 3.8. However, we still think that the result is
of practical relevance, as one can expect for a sufficiently
large network that stochastic gradient descent will lead to
a network structure where the data becomes separable at a
particular layer. When this happens all the associated critical points are globally optimal. It is an interesting question
for further research if one can show directly under some
architecture condition that the network outputs become linearly separable at some layer for any local minimum and
thus every local minimum is a global minimum.

Brutzkus, A. and Globerson, A. Globally optimal gradient descent for a convnet with gaussian inputs, 2017.
arXiv:1702.07966.

6. Discussion
Our results show that the loss surface becomes wellbehaved when there is a wide layer in the network. Implicitly, such a wide layer is often present in convolutional
neural networks used in computer vision. It is thus an interesting future research question how and if our result can
be generalized to neural networks with sparse connectivity. We think that the results presented in this paper are a
significant addition to the recent understanding why deep
learning works so efficiently. In particular, since in this paper we are directly working with the neural networks used
in practice without any modifications or simplifications.

Acknowledgment
The authors acknowledge support by the ERC starting
grant NOLEPRO 307793.

References
Auer, P., Herbster, M., and Warmuth, M. K. Exponentially
many local minima for single neurons. In NIPS, 1996.
Ba, J. and Caruana, R. Do deep nets really need to be deep?

Barber, D. Bayesian Reasoning and Machine Learning.
Cambridge University Press, Berlin, 2012.

Caruana, R., Lawrence, S., and Giles, L. Overfitting in
neural nets: Backpropagation, conjugate gradient, and
early stopping. In NIPS, 2001.
Choromanska, A., Hena, M., Mathieu, M., Arous, G. B.,
and LeCun, Y. The loss surfaces of multilayer networks.
In AISTATS, 2015a.
Choromanska, A., LeCun, Y., and Arous, G. B. Open problem: The landscape of the loss surfaces of multilayer
networks. JMLR, 2015b.
Ciresan, D. C., Meier, U., Gambardella, L. M., and
Schmidhuber, J. Deep, big, simple neural nets for
handwritten digit recognition. Neural Computation, 22:
3207–3220, 2010.
Dauphin, Y., Pascanu, R., Gulcehre, C., Cho, K., Ganguli,
S., and Bengio, Y. Identifying and attacking the saddle point problem in high-dimensional non-convex optimization. In NIPS, 2014.
Frasconi, P., Gori, M., and Tesi, A. Successes and failures of backpropagation: A theoretical investigation.
Progress in Neural Networks: Architecture, 1997.
Gautier, A., Nguyen, Q., and Hein, M. Globally optimal
training of generalized polynomial neural networks with
nonlinear spectral methods. In NIPS, 2016.
Goodfellow, I. J., Vinyals, O., and Saxe, A. M. Qualitatively characterizing neural network optimization problems. In ICLR, 2015.
Gori, M. and Tesi, A. On the problem of local minima in
backpropagation. IEEE Transactions on Pattern Analysis and Machine Intelligence, 14:76–86, 1992.
Haeffele, B. D. and Vidal, R. Global optimality in
tensor factorization, deep learning, and beyond, 2015.
arXiv:1506.07540v1.
Hartley, R. and Zisserman, A. Multiple view geometry
in computer vision. Cambridge University Press, New
York, 2004.

The Loss Surface of Deep and Wide Neural Networks

Janzamin, M., Sedghi, H., and Anandkumar, A. Beating
the perils of non-convexity: Guaranteed training of neural networks using tensor methods. arXiv:1506.08473,
2016.
Kawaguchi, K. Deep learning without poor local minima.
In NIPS, 2016.
Krantz, S. G. and Parks, H. R. A Primer of Real Analytic
Functions. Birkhäuser, Boston, second edition, 2002.
Krizhevsky, A., Sutskever, I., and Hinton, G. E. Imagenet
classification with deep convolutional neural networks.
In NIPS, 2012.
LeCun, Y., Boser, B., Denker, J.S., Henderson, D., Howard,
R.E., Hubbard, W., and Jackel, L.D. Handwritten digit
recognition with a back-propagation network. In NIPS,
1990.
LeCun, Y., Bengio, Y., and Hinton, G. Deep learning. Nature, 521, 2015.
Lee, J. D., Simchowitz, M., Jordan, M. I., and Recht,
B. Gradient descent only converges to minimizers. In
COLT, 2016.
Lin, Z., Memisevic, R., and Konda, K. How far can we
go without convolution: Improving fully-connected networks. preprint, arXiv:1511.02580, 2016.
Marsden, J. E.
Elementary classical analysis.
W.H.Freeman and Company, 1974.
Milnor, J. Lectures on H-Cobordism Theorem. Princeton
University Press, Princeton, 1965.
Mityagin, B. The zero set of a real analytic function, 2015.
arXiv:1512.07276.
Neyshabur, B., Salakhutdinov, R. R., and Srebro, N. Pathsgd: Path-normalized optimization in deep neural networks. In NIPS, 2015.
Nguyen, V. D.
Complex powers of analytic functions and meromorphic renormalization in qft, 2015.
arXiv:1503.00995.
Poggio, T. and Liao, Q. Theory ii: Landscape of the empirical risk in deep learning, 2017. arXiv:1703.09833.
Rister, B. and Rubin, D. L. Piecewise convexity of artificial
neural networks, 2017. arXiv:1607.04917.
Safran, I. and Shamir, O. On the quality of the initial basin
in overspecified networks. In ICML, 2016.
Sagun, L., Bottou, L., and LeCun, Y. Singularity of the
hessian in deep learning, 2016. arXiv:1611.07476.

Sima, J. Training a single sigmoidal neuron is hard. Neural
Computation, 14:2709–2728, 2002.
Soltanolkotabi, M. Learning relus via gradient descent,
2017. arXiv:1705.04591.
Soudry, D. and Hoffer, E. Exponentially vanishing suboptimal local minima in multilayer neural networks,
2017. arXiv:1702.05777.
Vincent, P., Larochelle, H., Lajoie, I., Bengio, Y., and Manzagol, P. Stacked denoising autoencoders: Learning useful representations in a deep network with a local denoising criterion. JLMR, 11:3371–3408, 2010.
Yu, X. and Chen, G. On the local minima free condition of
backpropagation learning. IEEE Transaction on Neural
Networks, 6:1300–1303, 1995.
Zhang, C., Bengio, S., Hardt, M., Recht, B., and Vinyals,
Oriol. Understanding deep learning requires re-thinking
generalization. In ICLR, 2017.
Zhou, P. and Feng, J. The landscape of deep learning algorithms, 2017. arXiv:1705.07038.

