Active Learning for Accurate Estimation of Linear Models

Carlos Riquelme 1 Mohammad Ghavamzadeh 2 Alessandro Lazaric 3

Abstract
We explore the sequential decision-making problem where the goal is to estimate a number of linear models uniformly well, given a shared budget
of random contexts independently sampled from
a known distribution. For each incoming context,
the decision-maker selects one of the linear models and receives an observation that is corrupted
by the unknown noise level of that model. We
present Trace-UCB, an adaptive allocation algorithm that learns the models‚Äô noise levels while
balancing contexts accordingly across them, and
prove bounds for its simple regret in both expectation and high-probability. We extend the algorithm and its bounds to the high dimensional setting, where the number of linear models times
the dimension of the contexts is more than the
total budget of samples. Simulations with real
data suggest that Trace-UCB is remarkably robust, outperforming a number of baselines even
when its assumptions are violated.

1. Introduction
We study the problem faced by a decision-maker whose
goal is to estimate a number of regression problems equally
well (i.e., with a small prediction error for each of them),
and has to adaptively allocate a limited budget of samples
to the problems in order to gather information and improve
its estimates. Two aspects of the problem formulation are
key and drive the algorithm design: 1) The observations
Y collected from each regression problem depend on side
information (i.e., contexts X ‚àà Rd ) and we model the relationship between X and Y in each problem i as a linear
function with unknown parameters Œ≤i ‚àà Rd , and 2) The
‚Äúhardness‚Äù of learning each parameter Œ≤i is unknown in advance and may vary across the problems. In particular, we
1
Stanford University, Stanford, CA, USA. 2 DeepMind, Mountain View, CA, USA (The work was done when the author was
with Adobe Research). 3 Inria Lille, France. Correspondence to:
Carlos Riquelme <rikel@stanford.edu>.

Proceedings of the 34 th International Conference on Machine
Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017
by the author(s).

assume that the observations are corrupted by noise levels
that are problem-dependent and must be learned as well.
This scenario may arise in a number of different domains
where a fixed experimentation budget (number of samples)
should be allocated to different problems. Imagine a drug
company that has developed several treatments for a particular form of disease. Now it is interested in having an accurate estimate of the performance of each of these treatments
for a specific population of patients (e.g., at a particular
geographical location). Given the budget allocated to this
experiment, a number of patients n can participate in the
clinical trial. Volunteered patients arrive sequentially over
time and they are represented by a context X ‚àà Rd summarizing their profile. We model the health status of patient X
after being assigned to treatment i by scalar Yi ‚àà R, which
depends on the specific drug through a linear function with
parameter Œ≤i (i.e., Yi ‚âà X T Œ≤i ). The goal is to assign each
incoming patient to a treatment in such a way that at the end
of the trial, we have an accurate estimate for all Œ≤i ‚Äôs. This
will allow us to reliably predict the expected health status
of each new patient X for any treatment i. Since the parameters Œ≤i and the noise levels are initially unknown, achieving this goal requires an adaptive allocation strategy for the
n patients. Note that while n may be relatively small, as
the ethical and financial costs of treating a patient are high,
the distribution of the contexts X (e.g., the biomarkers of
cancer patients) can be precisely estimated in advance.
This setting is clearly related to the problem of pure exploration and active learning in multi-armed bandits (Antos et al., 2008), where the learner wants to estimate the
mean of a finite set of arms by allocating a finite budget
of n pulls. Antos et al. (2008) first introduced this setting
where the objective is to minimize the largest mean square
error (MSE) in estimating the value of each arm. While
the optimal solution is trivially to allocate the pulls proportionally to the variance of the arms, when the variances
are unknown an exploration-exploitation dilemma arises,
where variance and value of the arms must be estimated at
the same time in order to allocate pulls where they are more
needed (i.e., arms with high variance). Antos et al. (2008)
proposed
‚àö a forcing algorithm where all arms are pulled at
least n times before allocating pulls proportionally to the
estimated variances. They derived bounds on the regret,
measuring the difference between the MSEs of the learn-

Active Learning for Accurate Estimation of Linear Models

ing algorithm and an optimal allocation showing that the
regret decreases as O(n‚àí3/2 ). A similar result is obtained
by Carpentier et al. (2011) that proposed two algorithms
that use upper confidence bounds on the variance to estimate the MSE of each arm and select the arm with the
larger MSE at each step. When the arms are embedded
in Rd and their mean is a linear combination with an unknown parameter, then the problem becomes an optimal
experimental design problem (Pukelsheim, 2006), where
the objective is to estimate the linear parameter and minimize the prediction error over all arms (see e.g., Wiens &
Li 2014; Sabato & Munos 2014). In this paper, we consider
an orthogonal extension to the original problem where a finite number of linear regression problems is available (i.e.,
the arms) and random contexts are observed at each time
step. Similarly to the setting of Antos et al. (2008), we
assume each problem is characterized by a noise with different variance and the objective is to return regularized
least-squares (RLS) estimates with small prediction error
(i.e., MSE). While we leverage on the solution proposed
by Carpentier et al. (2011) to deal with the unknown variances, in our setting the presence of random contexts make
the estimation problem considerably more difficult. In fact,
the MSE in one specific regression problem is not only determined by the variance of the noise and the number of
samples used to compute the RLS estimate, but also by the
contexts observed over time.
Contributions. We propose T RACE -UCB, an algorithm
that simultaneously learns the ‚Äúhardness‚Äù of each problem,
allocates observations proportionally to these estimates,
and balances contexts across problems. We derive performance bounds for T RACE -UCB in expectation and highprobability, and compare the algorithm with several baselines. T RACE -UCB performs remarkably well in scenarios
where the dimension of the contexts or the number of instances is large compared to the total budget, motivating the
study of the high-dimensional setting, whose analysis and
performance bounds are reported in App. F of Riquelme
et al. (2017a). Finally, we provide simulations with synthetic data that support our theoretical results, and with real
data that demonstrate the robustness of our approach even
when some of the assumptions do not hold.

2. Preliminaries
The problem. We consider m linear regression problems,
where each instance i ‚àà [m] = {1, . . . , m} is characterized
by a parameter Œ≤i ‚àà Rd such that for any context X ‚àà Rd ,
a random observation Y ‚àà R is obtained as
Y = X T Œ≤i + i ,

(1)

where the noise i is an i.i.d. realization of a Gaussian dis2
tribution N (0, œÉi2 ). We denote by œÉmax
= maxi œÉi2 and

P
by œÉ 2 = 1/m i œÉi2 , the largest and the average variance,
respectively. We define a sequential decision-making problem over n rounds, where at each round t ‚àà [n], the learning algorithm A receives a context Xt drawn i.i.d. from
N (0, Œ£), selects an instance It , and observes a random
sample YIt ,t according to (1). By the end of the experiment,
a training set Dn = {Xt , It , YIt ,t }t‚àà[n] has been collected
and all the m linear regression problems are solved, each
problem i ‚àà [m] with its own training set Di,n (i.e., a subset of Dn containing samples with It = i), and estimates
of the parameters {Œ≤ÃÇi,n }i‚àà[m] are returned. For each Œ≤ÃÇi,n ,
we measure its accuracy by the mean-squared error (MSE)


Li,n (Œ≤ÃÇi,n ) = EX (X T Œ≤i ‚àíX T Œ≤ÃÇi,n )2 = kŒ≤i ‚àí Œ≤ÃÇi,n k2Œ£ . (2)
We evaluate the overall accuracy of the estimates returned
by the algorithm A as


Ln (A) = max EDn Li,n (Œ≤ÃÇi,n ) ,
(3)
i‚àà[m]

where the expectation is w.r.t. the randomness of the contexts Xt and observations Yi,t used to compute Œ≤ÃÇi,n . The
objective is to design an algorithm A that minimizes the
loss (3). This requires defining an allocation rule to select
the instance It at each step t and the algorithm to compute the estimates Œ≤ÃÇi,n , e.g., ordinary least-squares (OLS),
regularized least-squares (RLS), or Lasso. In designing a
learning algorithm, we rely on the following assumption.
Assumption 1. The covariance matrix Œ£ of the Gaussian
distribution generating the contexts {Xt }nt=1 is known.
This is a standard assumption in active learning, since in
this setting the learner has access to the input distribution and the main question is for which context she should
ask for a label (Sabato & Munos, 2014; Riquelme et al.,
2017b). Often times, companies, like the drug company
considered in the introduction, own enough data to have
an accurate estimate of the distribution of their customers
(patients).
While in the rest of the paper we focus on Ln (A), our algorithm and analysis can be easily extended to similar objectives such as replacing the maximum
in (3) with average

Pm
across all instances, i.e., 1/m i=1 EDn Li,n (Œ≤ÃÇi,n ) , and


using weighted errors, i.e., maxi wi EDn Li,n (Œ≤ÃÇi,n ) , by
updating the score to focus on the estimated standard deviation and by including the weights in the score, respectively. Later in the paper, we also consider the case where
the expectation in (3) is replaced by the high-probability
error (see Eq. 17).
Optimal static allocation with OLS estimates. While the
distribution of the contexts is fixed and does not depend on
the instance i, the errors Li,n (Œ≤ÃÇi,n ) directly depend on the
variances œÉi2 of the noise i . We define an optimal baseline

Active Learning for Accurate Estimation of Linear Models

obtained when the noise variances {œÉi2 }m
i=1 are known. In
particular, we focus on a static allocation algorithm Astat
that selects each instance i exactly ki,n times, independently of the context,1 and returns an estimate Œ≤ÃÇi,n computed by OLS as
Œ≤bi,n = XT
i,n Xi,n

‚àí1

XT
i,n Yi,n ,

(4)

where Xi,n ‚àà Rki,n √ód is the matrix of (random) samples
obtained at the end of the experiment, and Yi,n ‚àà Rki,n
is its corresponding vector of observations. It is simple to
show that the global error corresponding to Astat is
 ‚àí1 
œÉi2 
b
Tr Œ£EDn Œ£
,
i,n
i‚àà[m] ki,n

Ln (Astat ) = max

(5)

b i,n = XT Xi,n /ki,n ‚àà Rd√ód is the empirical cowhere Œ£
i,n
variance matrix of the contexts assigned to instance i. Since
the algorithm does not change the allocation depending on
b ‚àí1 is distributed as an
the contexts and Xt ‚àº N (0, Œ£), Œ£
i,n
inverse-Wishart and we may write (5) as
dœÉi2
.
i‚àà[m] ki,n ‚àí d ‚àí 1

Ln (Astat ) = max

mean variance should be pulled more often. In any case,
we see that the correction to the context-free allocation
(i.e., the second term) is constant, as it does not depend on
n. Nonetheless, it does depend on d and this suggests that
in high-dimensional problems, it may significantly skew
the optimal allocation.
While A‚àóstat effectively minimizes the prediction loss Ln ,
it cannot be implemented in practice since the optimal allocation ki‚àó requires the variances œÉi2 to be known at the
beginning of the experiment. As a result, we need to devise
a learning algorithm A whose performance approaches L‚àón
as n increases. More formally, we define the regret of A as
Rn (A) = Ln (A) ‚àí Ln (A‚àóstat ) = Ln (A) ‚àí L‚àón ,

(9)

and we expect Rn (A) = o(1/n). In fact, any allocation
strategy that selects each instance a linear number of times
(e.g., uniform sampling) achieves a loss Ln = O(1/n), and
thus, a regret of order O(1/n). However, we expect that the
loss of an effective learning algorithm decreases not just at
the same rate as L‚àón but also with the very same constant,
thus implying a regret that decreases faster than O(1/n).

(6)

Thus, we derive the following proposition for the optimal
static allocation algorithm A‚àóstat .
Proposition 1. Given m linear regression problems, each
characterized by a parameter Œ≤i , Gaussian noise with variance œÉi2 , and Gaussian contexts with covariance Œ£, let
n > m(d + 1), then the optimal OLS static allocation algorithm A‚àóstat selects each instance


œÉ2
œÉ2
‚àó
ki,n
= P i 2 n + (d + 1) 1 ‚àí i2 ,
(7)
œÉ
j œÉj
times (up to rounding effects), and incurs the global error

2 !
md
‚àó
‚àó
2 md
2
Ln = Ln (Astat ) = œÉ
+O œÉ
. (8)
n
n
Proof. See Appendix A.1.2
Proposition 1 divides the problems into two types: those
for which œÉi2 ‚â• œÉÃÑ 2 (wild instances) and those for which
œÉi2 < œÉÃÑ 2 (mild instances). We see that for the first type,
the second term in (7) is negative and the instance should
be selected less frequently than in the context-free case
(where the optimal allocation is given just by the first term).
On the other hand, instances whose variance is below the
1
This strategy can be obtained by simply selecting the first
instance k1,n times, the second one k2,n times, and so on.
2
All the proofs can be found in the appendices of the extended
version of the paper (Riquelme et al., 2017a).

3. The T RACE -UCB Algorithm
In this section, we present and analyze an algorithm of
the form discussed at the end of Section 2, which we
call T RACE -UCB, whose pseudocode is in Algorithm 1.
Algorithm 1 T RACE -UCB Algorithm
1: for i = 1, . . . , m do
2:
Select problem instance i exactly d + 1 times
2
3:
Compute its OLS estimates Œ≤ÃÇi,m(d+1) and œÉÃÇi,m(d+1)
4: end for
5: for steps t = m(d + 1) + 1, . . . , n do
6:
for problem instance 1 ‚â§ i ‚â§ m do
7:
Compute score
(‚àÜi,t‚àí1 is defined in (11))
si,t‚àí1 =

2

œÉ
bi,t‚àí1
+ ‚àÜi,t‚àí1
Tr Œ£Œ£ÃÇ‚àí1
i,t‚àí1
ki,t‚àí1

8:
end for
9:
Select problem instance It = arg maxi‚àà[m] si,t‚àí1
10:
Observe Xt and YIt ,t
11:
Update its OLS estimators Œ≤ÃÇIt ,t and œÉÃÇI2t ,t
12: end for
Œª m
13: Return RLS estimates {Œ≤ÃÇi,n
}i=1 with regularization Œª

The regularization parameter Œª = O(1/n) is provided to
the algorithm as input, while in practice one could set Œª
independently for each arm using cross-validation.
Intuition. Equation (6) suggests that while the parameters
of the context distribution, particularly its covariance Œ£, do

Active Learning for Accurate Estimation of Linear Models

not impact the prediction error, the noise variances play the
most important role in the loss of each problem instance.
‚àó
This is in fact confirmed by the optimal allocation ki,n
2
in (7), where only the variances œÉi appear. This evidence
suggests that an algorithm similar to GAFS-MAX (Antos
et al., 2008) or CH-AS (Carpentier et al., 2011), which
were designed for the context-free case (i.e., each instance i
is associated to an expected value and not a linear function)
would be effective in this setting as well. Nonetheless, (6)
holds only for static allocation algorithms that completely
ignore the context and the history to decide which instance
It to choose at time t. On the other hand, adaptive learning
algorithms create a strong correlation between the dataset
Dt‚àí1 collected so far, the current context Xt , and the decision It . As a result, the sample matrix Xi,t is no longer a
random variable independent of A, and using (6) to design
a learning algorithm is not convenient, since the impact of
the contexts on the error is completely overlooked. Unfortunately, in general, it is very difficult to study the potential
correlation between the contexts Xi,t , the intermediate estimates Œ≤ÃÇi,t , and the most suitable choice It . However, in
the next lemma, we show that if at each step t, we select It
as a function of Dt‚àí1 , and not Xt , we may still recover an
expression for the final loss that we can use as a basis for
the construction of an effective learning algorithm.
Lemma 2. Let A be a learning algorithm that selects
the instances It as a function of the previous history,
i.e., Dt‚àí1 = {X1 , I1 , YI1 ,1 , . . . , Xt‚àí1 , It‚àí1 , YIt‚àí1 ,t‚àí1 }
and computes estimates Œ≤bi,n using OLS. Then, its loss after
n steps can be expressed as
 2 

œÉi
‚àí1
b
Tr Œ£Œ£i,n ,
(10)
Ln (A) = max EDn
ki,n
i‚àà[m]
where ki,n =

Pn

t=1

b i,n = XT Xi,n /ki,n .
I{It = i} and Œ£
i,n

Proof. See Appendix B.
Remark 1 (assumptions). We assume noise and contexts
are Gaussian. The noise Gaussianity is crucial for the es2
timates of the parameter Œ≤bi,t and variance œÉ
bi,t
to be independent of each other, for each instance i and time t (we
actually need and derive a stronger result in Lemma 9, see
Appendix B). This is key in proving Lemma 2, as it allows
us to derive a closed form expression for the loss function
which holds under our algorithm, and is written in terms of
the number of pulls and the trace of the inverse empirical
2
covariance matrix. Note that Œ≤bi,t drives our loss, while œÉ
bi,t
drives our decisions. One way to remove this assumption is
by defining and directly optimizing a surrogate loss equal
to (10) instead of (3). On the other hand, the Gaussianity of
contexts leads to the whitened inverse covariance estimate
b ‚àí1 being distributed as an inverse Wishart. As there
Œ£Œ£
i,n

is a convenient closed formula for its mean, we can find
‚àó
the exact optimal static allocation ki,n
in Proposition 1, see
(7). In general, for sub-Gaussian contexts, no such closed
formula for the trace is available. However, as long as the
‚àó
optimal allocation ki,n
has no second order nŒ± terms for
1/2 ‚â§ Œ± < 1, it is possible to derive the same regret rate
results that we prove later on for T RACE -UCB.
Equation (10) makes it explicit that the prediction error
comes from two different sources. The first one is the noise
in the measurements Y, whose impact is controlled by the
unknown variances œÉi2 ‚Äôs. Clearly, the larger the œÉi2 is, the
more observations are required to achieve the desired accuracy. At the same time, the diversity of contexts across
instances also impacts the overall prediction error. This is
very intuitive, since it would be a terrible idea for the research center discussed in the introduction to estimate the
parameters of a drug by providing the treatment only to a
hundred almost identical patients. We say contexts are balb i,n is well conditioned. Therefore, a good
anced when Œ£
algorithm should take care of both aspects.
There are two extreme scenarios regarding the contributions of the two sources of error. 1) If the number of
contexts n is relatively large, since the context distribution is fixed, one can expect that contexts allocated to each
instance eventually become balanced (i.e., T RACE -UCB
does not bias the distribution of the contexts). In this case,
it is the difference in œÉi2 ‚Äôs that drives the number of times
each instance is selected. 2) When the dimension d or the
number of arms m is large w.r.t. n, balancing contexts becomes critical, and can play an important role in the final
prediction error, whereas the œÉi2 ‚Äôs are less relevant in this
scenario. While a learning algorithm cannot deliberately
choose a specific context (i.e., Xt is a random variable),
we may need to favor instances in which the contexts are
poorly balanced and their prediction error is large, despite
the fact that they might have small noise variances.
Algorithm. T RACE -UCB is designed as a combination of
the upper-confidence-bound strategy used in CH-AS (Carpentier et al., 2011) and the loss in (10), so as to obtain a
learning algorithm capable of allocating according to the
estimated variances and at the same time balancing the error generated by context mismatch. We recall that all the
quantities that are computed at every step of the algorithm
are indexed at the beginning and end of a step t by i, t ‚àí 1
2
(e.g., œÉ
bi,t‚àí1
) and i, t (e.g., Œ≤bi,t ), respectively. At the end of
each step t, T RACE -UCB first computes an OLS estimate
2
Œ≤bi,t , and then use it to estimate the variance œÉ
bi,t
as
2
œÉ
bi,t
=


1 
b 2 ,
Yi,t ‚àí XT
i,t Œ≤i,t
ki,t ‚àí d

which is the average squared deviation of the predictions
based on Œ≤bi,t . We rely on the following concentration in-

Active Learning for Accurate Estimation of Linear Models

equality for the variance estimate of linear regression with
Gaussian noise, whose proof is reported in Appendix C.1.

App. D.1) that shows that T RACE -UCB behaves similarly
to the optimal static allocation.

Proposition 3. Let the number of pulls ki,t ‚â• d + 1 and
R ‚â• maxi œÉi2 . If Œ¥ ‚àà (0, 3/4), then for any instance i and
step t > m(d + 1), with probability at least 1 ‚àí 2Œ¥ , we have
s

2
2mn
64
‚àÜ
2
2
. (11)
|œÉÃÇi,t ‚àí œÉi | ‚â§ ‚àÜi,t = R
log
ki,t ‚àí d
Œ¥

Theorem 5. Let Œ¥ > 0. With probability at least 1 ‚àí Œ¥,
the total number of contexts that T RACE -UCB allocates to
each problem instance i after n rounds satisfies
r
nd
C‚àÜ + 8CTr
‚àó
‚àí ‚Ñ¶(n1/4 )
(14)
ki,n ‚â• ki,n
‚àí
2
œÉmin
Œªmin

Given (11), we can construct an upper-bound on the prediction error of any instance i and time step t as
si,t‚àí1

2


œÉÃÇi,t‚àí1
+ ‚àÜi,t‚àí1
=
Tr Œ£Œ£ÃÇ‚àí1
i,t‚àí1 ,
ki,t‚àí1

(12)

and then simply select the instance which maximizes this
score, i.e., It = arg maxi si,t‚àí1 . Intuitively, T RACE -UCB
favors problems where the prediction error is potentially
large, either because of a large noise variance or because
of significant unbalance in the observed contexts w.r.t. the
target distribution with covariance Œ£. A subtle but critical
aspect of T RACE -UCB is that by ignoring the current context Xt (but using all the past samples Xt‚àí1 ) when choosing It , the distribution of the contexts allocated to each instance stays untouched and the second term in the score
b ‚àí1 ), naturally tends to d as more and
si,t‚àí1 , i.e., Tr(Œ£Œ£
i,t‚àí1
more (random) contexts are allocated to instance i. This is
shown by Proposition 4 whose proof is in Appendix C.2.
Proposition 4. Force the number of samples ki,t ‚â• d + 1.
If Œ¥ ‚àà (0, 1), for any i ‚àà [m] and step t > m(d + 1) with
probability at least 1 ‚àí Œ¥/2, we have


s
s
‚àí1


2
2
Tr
Œ£
Œ£ÃÇ
i,t
d
d
1 ‚àí CTr
‚â§ 1 + 2CTr
‚â§
,
ki,t
d
ki,t
p
with CTr = 1 + 2 log(4nm/Œ¥)/d.
While Proposition 4 shows that the error term due to context mismatch tends to the constant d for all instances i as
the number of samples tends to infinity, when t is small
w.r.t. d and m, correcting for the context mismatch may
significantly improve the accuracy of the estimates Œ≤bi,n returned by the algorithm. Finally, note that while T RACE UCB uses OLS to compute estimates Œ≤bi,t , it computes its
returned parameters Œ≤bi,n by ridge regression (RLS) with
regularization parameter Œª as
‚àí1 T
Œ≤ÃÇiŒª = (XT
Xi,n Yi,n .
i,n Xi,n + ŒªI)

(13)

As we will discuss later, using RLS makes the algorithm
more robust and is crucial in obtaining regret bounds both
in expectation and high probability.
Performance Analysis. Before proving a regret bound for
T RACE -UCB, we report an intermediate result (proof in

2
is known by the algorithm, and
where R ‚â• œÉmax
P we defined
2
C‚àÜ = 16R log(2mn/Œ¥) and Œªmin = œÉmin
/ j œÉj2 .

We now report our regret bound for the T RACE -UCB algorithm. The proof of Theorem 6 is in Appendix D.2.
Theorem 6. The regret of the Trace-UCB algorithm,
i.e., the difference between its loss and the loss of optimal
static allocation (see Eq. (8)), is upper-bounded by


1  d 3/2
.
(15)
Ln (A) ‚àí L‚àón ‚â§ O 2
œÉmin Œªmin n
Eq. (15) shows that the regret decreases as O(n‚àí3/2 ) as expected. This is consistent with the context-free results (Antos et al., 2008; Carpentier et al., 2011), where the regret
decreases as n‚àí3/2 , which is conjectured to be optimal.
However, it is important to note that in the contextual case,
the numerator also includes the dimensionality d. Thus,
when n  d, the regret will be small, and it will be larger
when n ‚âà d. This motivates studying the high-dimensional
setting (App. F). Eq. (15) also indicates that the regret
depends on a problem-dependent constant 1/Œªmin , which
measures the complexity of the problem. Note that when
2
2
œÉmax
‚âà œÉmin
, we have 1/Œªmin ‚âà m, but 1/Œªmin could be
2
2
much larger when œÉmax
 œÉmin
.
Remark 2. We introduce a baseline motivated by the
context-free problem. At round t, let VAR -UCB selects
the instance that maximizes the score3
s0i,t‚àí1 =

2
œÉÃÇi,t‚àí1
+ ‚àÜi,t‚àí1
.
ki,t‚àí1

(16)

The only difference with the score used by T RACE -UCB
is the lack of the trace term in (12). Moreover, the regret
of this algorithm has similar rate in terms of n and d as
that of T RACE -UCB reported in Theorem 6. However, the
simulations of Sect. 4 show that the regret of VAR -UCB is
actually much higher than that of T RACE -UCB, specially
when dm is close to n. Intuitively, when n is close to dm,
balancing contexts becomes critical, and VAR -UCB suffers
because its score does not explicitly take them into account.
Sketch of the proof of Theorem 6. The proof is divided
into three parts. 1) We show that the behavior of the ridge
3
Note that VAR -UCB is similar to both the CH-AS and B-AS
algorithms in Carpentier et al. (2011).

Active Learning for Accurate Estimation of Linear Models

loss of T RACE -UCB is similar to that reported in Lemma 2
for algorithms that rely on OLS; see Lemma 19 in Ap2
pendix E. The independence of the Œ≤ÃÇi,t and œÉÃÇi,t
estimates
is again essential (see Remark 1). Although the loss of
T RACE -UCB depends on the ridge estimate of the paramŒª
eters Œ≤ÃÇi,n
, the decisions made by the algorithm at each
2
and obround only depend on the variance estimates œÉÃÇi,t
served contexts. 2) We follow the ideas in Carpentier et al.
(2011) to lower-bound the total number of pulls ki,n for
each i ‚àà [m] under a good event (see Theorem 5 and its
proof in Appendix D.1). 3) We finally use the ridge regularization to bound the impact of those cases outside the
good event, and combine everything in Appendix D.2.
The regret bound of Theorem 6 shows that the largest
expected loss across the problem instances incurred by
T RACE -UCB quickly approaches the loss of the optimal
static allocation algorithm (which knows the true noise
variances). While Ln (A) measures the worst expected loss,
at any specific realization of the algorithm, there may be
one of the instances which is very poorly estimated. As a
result, it would also be desirable to obtain guarantees for
the (random) maximum loss
e n (A) = max kŒ≤i ‚àí Œ≤ÃÇi,n k2 .
L
Œ£
i‚àà[m]

(17)

In particular, we are able to prove the following highe n (A) for T RACE -UCB.
probability bound on L
Theorem 7. Let Œ¥ > 0, and assume kŒ≤i k2 ‚â§ Z for all i,
for some Z > 0. With probability at least 1 ‚àí Œ¥,
m
P

en ‚â§
L

œÉj2 


3m 
1  d  32
d + 2 log
+O
. (18)
2
n
Œ¥
œÉmin
nŒªmin

j=1

Note that the first term in (18) corresponds to the first term
of the loss for the optimal static allocation, and the second
term is, again, a n‚àí3/2 deviation. However, in this case, the
guarantees hold simultaneously for all the instances.
Sketch of the proof of Theorem 7. In the proof we slightly
modify the confidence ellipsoids for the Œ≤ÃÇi,t ‚Äôs, based
on self-normalized martingales, and derived in (AbbasiYadkori et al., 2011); see Thm. 13 in App. C. By means of
the confidence ellipsoids we control the loss in (17). Their
radiuses depend on the number of samples per instance, and
we rely on a high-probability events to compute a lower
bound on the number of samples. In addition, we need to
make sure the mean norm of the contexts will not be too
large (see Corollary 15 in App. C). Finally, we combine the
lower bound on ki,n with the confidence ellipsoids to conclude the desired high-probability guarantees in Thm. 7.
High-Dimensional Setting. High-dimensional linear models are quite common in practice, motivating the study of
the n < dm case, where the algorithms discussed so far

break down. We propose S PARSE -T RACE -UCB in Appendix F, an extension of T RACE -UCB that assumes and
takes advantage of joint sparsity across the linear functions.
The algorithm has two-stages: first, an approximate support is recovered, and then, T RACE -UCB is applied to the
induced lower dimensional space. We discuss and extend
our high-probability guarantees to S PARSE -T RACE -UCB
under suitable standard assumptions in Appendix F.

4. Simulations
In this section, we provide empirical evidence to support
our theoretical results. We consider both synthetic and realworld problems, and compare the performance (in terms of
normalized MSE) of T RACE -UCB to uniform sampling,
optimal static allocation (which requires the knowledge of
noise variances), and the context-free algorithm VAR -UCB
(see Remark 2). We do not compare to GFSP-MAX and
GAFS-MAX (Antos et al., 2008) since they are outperformed by CH-AS Carpentier et al. (2011) and VAR -UCB
is the same as CH-AS, except for the fact that we use the
concentration inequality in Prop. 3, since we are estimating
the variance from a regression problem using OLS.
First, we use synthetic data to ensure that all the assumptions of our model are satisfied, namely we deal with linear regression models with Gaussian context and noise.
We set the number of problem instances to m = 7 and
consider two scenarios: one in which all the noise variances are equal to 1 and one where they are not equal,
and œÉ 2 = (0.01, 0.02, 0.75, 1, 2, 2, 3). In the latter case,
2
2
œÉmax
/œÉmin
= 300. We study the impact of (independently)
increasing dimension d and horizon n on the performance,
while keeping all other parameters fixed. Second, we consider real-world datasets in which the underlying model is
non-linear and the contexts are not Gaussian, to observe
how T RACE -UCB behaves (relative to the baselines) in settings where its main underlying assumptions are violated.
Synthetic Data. In Figures 1(a,b), we display the results
for fixed horizon n = 350 and increasing dimension d.
For each value of d, we run 10, 000 simulations and report
the median of the maximum error across the instances for
each simulation. In Fig. 1(a), where œÉi2 ‚Äôs are equal, uniform
sampling and optimal static allocation execute the same allocation since there is no difference in the expected losses
of different instances. Nonetheless we notice that VAR UCB suffers from poor estimation as soon as d increases,
while T RACE -UCB is competitive with the optimal performance. This difference in performance can be explained
by the fact that VAR -UCB does not control for contextual
balance, which becomes a dominant factor in the loss of a
learning strategy for problems of high dimensionality. In
Fig. 1(b), in which œÉi2 ‚Äôs are different, uniform sampling is
no longer optimal but even in this case VAR -UCB performs

Active Learning for Accurate Estimation of Linear Models
1.0

1.0
Var-UCB
Uniform Allocation
Optimal Static Allocation
Trace-UCB

0.6

0.4

0.6

0.4

0.2

5

10

15

20
d

25

30

35

0.0

0.2

5

10

15

20
d

25

30

35

0.0

(b) œÉ 2 = (0.01, 0.02, 0.75, 1, 2, 2, 3).

1.0

0.4

0.2

0.6

0.4

0.2

150

200

250
n

300

350

(d) œÉ 2 = (0.01, 0.02, 0.75, 1, 2, 2, 3).

0.0

200

250
n

300

350

1.0
Var-UCB
Uniform Allocation
Optimal Static Allocation
Trace-UCB

0.8
MSE (max 4.06)

0.6

150

(c) œÉ 2 = (1, 1, 1, 1, 1, 1, 1).

1.0
Var-UCB
Uniform Allocation
Optimal Static Allocation
Trace-UCB

0.8
MSE (max 3.5)

0.4

0.2

(a) œÉ 2 = (1, 1, 1, 1, 1, 1, 1).

0.0

0.6

Var-UCB
Uniform Allocation
Optimal Static Allocation
Trace-UCB

0.8
MSE (max 4.07)

0.0

Var-UCB
Uniform Allocation
Optimal Static Allocation
Trace-UCB

0.8
MSE (max 1.74)

0.8
MSE (max 8.49)

MSE (max 8.93)

0.8

1.0
Var-UCB
Uniform Allocation
Optimal Static Allocation
Trace-UCB

0.6

0.4

0.2

150

200

250
n

300

(e) œÉ 2 = (1, 1, 1, 1, 1, 1, 1).

350

0.0

150

200

250
n

300

350

(f) œÉ 2 = (0.01, 0.02, 0.75, 1, 2, 2, 3).

Figure 1. White Gaussian synthetic data with m = 7. In Figures (a,b), we set n = 350. In Figures (c,d,e,f), we set d = 10.

better than uniform sampling only for small d < 23, where
it is more important to control for the œÉi2 ‚Äôs. For larger dimensions, balancing uniformly the contexts eventually becomes a better strategy, and uniform sampling outperforms
VAR -UCB. In this case too, T RACE -UCB is competitive
with the optimal static allocation even for large d, successfully balancing both noise variance and contextual error.
Next, we study the performance of the algorithms w.r.t. n.
We report two different losses, one in expectation (3) and
one in high probability (17), corresponding to the results
we proved in Theorems 6 and 7, respectively. In order to
approximate the loss in (3) (Figures 1(c,d)) we run 30, 000
simulations, compute the average prediction error for each
instance i ‚àà [m], and finally report the maximum mean error across the instances. On the other hand, we estimate the
loss in (17) (Figures 1(e,f)) by running 30, 000 simulations,
taking the maximum prediction error across the instances
for each simulation, and finally reporting their median.
In Figures 1(c, d), we display the loss for fixed dimension
d = 10 and horizon from n = 115 to 360. In Figure 1(c),
T RACE -UCB performs similarly to the optimal static allocation, whereas VAR -UCB performs significantly worse,

ranging from 25% to 50% higher errors than T RACE -UCB,
due to some catastrophic errors arising from unlucky contextual realizations for an instance. In Fig. 1(d), as the number of contexts grows, uniform sampling‚Äôs simple context
balancing approach is enough to perform as well as VAR UCB that again heavily suffers from large mistakes. In
both figures, T RACE -UCB smoothly learns the œÉi2 ‚Äôs and
outperforms uniform sampling and VAR -UCB. Its performance is comparable to that of the optimal static allocation,
especially in the case of equal variances in Fig. 1(c).
In Figure 1(e), T RACE -UCB learns and properly balances
observations extremely fast and obtains an almost optimal
performance. Similarly to figures 1(a,c), VAR -UCB struggles when variances œÉÃÇi2 are almost equal, mainly because it
gets confused by random deviations in variance estimates
œÉÃÇi2 , while overlooking potential and harmful context imbalances. Note that even when n = 360 (rightmost point), its
median error is still 25% higher than T RACE -UCB‚Äôs. In
Fig. 1(f), as expected, uniform sampling performs poorly,
due to mismatch in variances, and only outperforms VAR UCB for small horizons in which uniform allocation pays
off. On the other hand, T RACE -UCB is able to success-

Active Learning for Accurate Estimation of Linear Models
1.0

0.7
0.6
0.5
0.4

Var-UCB
Uniform Allocation
Trace-UCB

0.95

0.8
MSE (max 1.27)

MSE (max 418.88)

1.00

Var-UCB
Uniform Allocation
Trace-UCB

0.9

0.90

0.85

0.80

0.3
500

600

700

n

800

900

1000

200

250

300

n

350

400

450

Figure 2. Results on Jester (left) with d = 40, m = 10 and MovieLens (right) with d = 25, m = 5. Median over 1000 simulations.

fully handle the tradeoff between learning and allocating
according to variance estimates œÉÃÇi2 , while accounting for
b i , even for very low n. We observe
the contextual trace Œ£
that for large n, VAR -UCB eventually reaches the performance of the optimal static allocation and T RACE -UCB.
In practice the loss in (17) (figures 1(e,f)) is often more relevant than (3), since it is in high probability and not in expectation, and T RACE -UCB shows excellent performance
and robustness, regardless of the underlying variances œÉi2 .
Real Data. T RACE -UCB is based on assumptions such as
linearity, and Gaussianity of noise and context that may not
hold in practice, where data may show complex dependencies. Therefore, it is important to evaluate the algorithm
with real-world data to see its robustness to the violation
of its assumptions. We consider two collaborative filtering datasets in which users provide ratings for items. We
choose a dense subset of k users and p items, where every
user has rated every item. Thus, each user is represented
by a p-dimensional vector of ratings. We define the user
context by d out of her p ratings, and learn to predict her
remaining m = p ‚àí d ratings (each one is a problem instance). All item ratings are first centered, so each item‚Äôs
mean is zero. In each simulation, n out of the k users are selected at random to be fed to the algorithm, also in random
order. Algorithms can select any instance as the dataset
contains the ratings of every instance for all the users. At
the end of each simulation, we compute the prediction error
for each instance by using the k ‚àí n users that did not participate in training for that simulation. Finally, we report
the median error across all simulations.
Fig. 2(a) reports the results using the Jester Dataset
by (Goldberg et al., 2001) that consists of joke ratings in
a continuous scale from ‚àí10 to 10. We take d = 40 joke
ratings as context and learn the ratings for another 9 jokes.
In addition, we add another function that counts the total
number of movies originally rated by the user. The latter
is also centered, bounded to the same scale, and has higher
variance (without conditioning on X). The number of to-

tal users is k = 3811, and m = 10. When the number
of observations is limited, the advantage of T RACE -UCB
is quite significant (the improvement w.r.t. uniform allocation goes from 45% to almost 20% for large n, while w.r.t.
VAR -UCB it goes from almost 30% to roughly 5%), even
though the model and context distribution are far from linear and Gaussian, respectively.
Fig. 2(b) shows the results for the MovieLens
dataset (Maxwell Harper & Konstan, 2016) that consists of movie ratings between 0 and 5 with 0.5 increments.
We select 30 popular movies rated by k = 1363 users,
and randomly choose m = 5 of them to learn (so
d = 25). In this case, all problems have similar variance
2
2
/œÉÃÇmin
‚âà 1.3) so uniform allocation seems appropri(œÉÃÇmax
ate. Both T RACE -UCB and VAR -UCB modestly improve
uniform allocation, while their performance is similar.

5. Conclusions
We studied the problem of adaptive allocation of n contextual samples of dimension d to estimate m linear functions equally well, under heterogenous noise levels œÉi2
that depend on the linear instance and are unknown to
the decision-maker. We proposed T RACE -UCB, an optimistic algorithm that successfully solves the explorationexploitation dilemma by simultaneously learning the œÉi2 ‚Äôs,
allocating samples accordingly to their estimates, and balancing the contextual information across the instances. We
also provide strong theoretical guarantees for two losses of
interest: in expectation and high-probability. Simulations
were conducted in several settings, with both synthetic and
real data. The favorable results suggest that T RACE -UCB
is reliable, and remarkably robust even in settings that fall
outside its assumptions, thus, a useful and simple tool to
implement in practice.
Acknowledgements. A. Lazaric is supported by French Ministry
of Higher Education and Research, Nord-Pas-de-Calais Regional
Council and French National Research Agency projects ExTraLearn (n.ANR-14-CE24-0010-01).

Active Learning for Accurate Estimation of Linear Models

References
Abbasi-Yadkori, Y., PaÃÅl, D., and SzepesvaÃÅri, Cs. Improved
algorithms for linear stochastic bandits. In Advances in
Neural Information Processing Systems, pp. 2312‚Äì2320,
2011.
Antos, A., Grover, V., and SzepesvaÃÅri, Cs. Active learning
in multi-armed bandits. In International Conference on
Algorithmic Learning Theory, pp. 287‚Äì302, 2008.
Carpentier, A., Lazaric, A., Ghavamzadeh, M., Munos, R.,
and Auer, P. Upper-confidence-bound algorithms for
active learning in multi-armed bandits. In Algorithmic
Learning Theory, pp. 189‚Äì203. Springer, 2011.
Goldberg, K., Roeder, T., Gupta, D., and Perkins, C. Eigentaste: A constant time collaborative filtering algorithm.
Information Retrieval, 4(2):133‚Äì151, 2001.
Hastie, T., Tibshirani, R., and Wainwright, M. Statistical
learning with sparsity: the lasso and generalizations.
CRC Press, 2015.
Maxwell Harper, F. and Konstan, J. The movielens
datasets: History and context. ACM Transactions on Interactive Intelligent Systems (TiiS), 5(4):19, 2016.
Negahban, S. and Wainwright, M. Simultaneous support recovery in high dimensions: Benefits and perils of
block-regularization. IEEE Transactions on Information
Theory, 57(6):3841‚Äì3863, 2011.
Obozinski, G., Wainwright, M., and Jordan, M. Support
union recovery in high-dimensional multivariate regression. The Annals of Statistics, pp. 1‚Äì47, 2011.
Pukelsheim, F. Optimal Design of Experiments. Classics in
Applied Mathematics. Society for Industrial and Applied
Mathematics, 2006.
Raskutti, G., Wainwright, M. J, and Yu, B. Restricted
eigenvalue properties for correlated gaussian designs.
Journal of Machine Learning Research, 11(8):2241‚Äì
2259, 2010.
Riquelme, C., Ghavamzadeh, M., and Lazaric, A. Active
learning for accurate estimation of linear models. arXiv
preprint arXiv:1703.00579, 2017a.
Riquelme, C., Johari, R., and Zhang, B. Online active
linear regression via thresholding. In Thirty-First AAAI
Conference on Artificial Intelligence, 2017b.
Sabato, S. and Munos, R. Active regression by stratification. In Advances in Neural Information Processing
Systems, pp. 469‚Äì477, 2014.
Vershynin, R. Introduction to the non-asymptotic analysis
of random matrices. arXiv:1011.3027, 2010.

Wainwright, M. High-dimensional statistics: A nonasymptotic viewpoint. Draft, 2015.
Wang, W., Liang, Y., and Xing, E. Block regularized lasso
for multivariate multi-response linear regression. In AISTATS, 2013.
Wiens, D. and Li, P. V-optimal designs for heteroscedastic regression. Journal of Statistical Planning and Inference, 145:125‚Äì138, 2014.

Active Learning for Accurate Estimation of Linear Models

A. Optimal Static Allocation
A.1. Proof of Proposition 1
Proposition. Given m linear regression problems, each characterized by a parameter Œ≤i , Gaussian noise with variance
œÉi2 , and Gaussian contexts with covariance Œ£, let n > m(d + 1), then the optimal OLS static allocation algorithm A‚àóstat
selects each instance


œÉ2
œÉ2
‚àó
ki,n
= P i 2 n + (d + 1) 1 ‚àí i2 ,
(19)
œÉ
j œÉj
times (up to rounding effects), and incurs the global error
L‚àón

=

Ln (A‚àóstat )

=œÉ

2 md

n

+O œÉ

2



md
n

2 !
.

(20)

Proof. For the sake of readability in the following we drop the dependency on n.
We first derive the equality in Eq. 2


Li (Œ≤ÃÇi ) = EX (X T Œ≤i ‚àí X T Œ≤ÃÇi )2
= EX [(Œ≤ÃÇi ‚àí Œ≤i )T XX T (Œ≤ÃÇi ‚àí Œ≤i )]
= (Œ≤ÃÇi ‚àí Œ≤i )T E[XX T ](Œ≤ÃÇi ‚àí Œ≤i )
= (Œ≤ÃÇi ‚àí Œ≤i )T Œ£(Œ≤ÃÇi ‚àí Œ≤i )
= kŒ≤i ‚àí Œ≤ÃÇi k2Œ£ .
As a result, we can write the global error as
h
i
Ln (Astat ) = max EDi,n kŒ≤i ‚àí Œ≤ÃÇi k2Œ£
i‚àà[m]
 

= max EDi,n Tr (Œ≤i ‚àí Œ≤ÃÇi )T Œ£(Œ≤i ‚àí Œ≤ÃÇi )
i‚àà[m]
 

= max EDi,n Tr Œ£(Œ≤i ‚àí Œ≤ÃÇi )(Œ≤i ‚àí Œ≤ÃÇi )T
i‚àà[m]

h
i
T
= max Tr EDi,n Œ£(Œ≤i ‚àí Œ≤ÃÇi )(Œ≤i ‚àí Œ≤ÃÇi )
,
i‚àà[m]

where Di,n is the training set extracted from Dn containing the samples for instance i. Since contexts and noise are
independent random variables, we can decompose Di,n into the randomness related to the context matrix Xi ‚àà Rki √ód and
the noise vector i ‚àà Rki . We recall that for any fixed realization of Xi ‚àà Rki √ód , the OLS estimates Œ≤bi is distributed as
‚àí1
Œ≤ÃÇi | Xi ‚àº N (Œ≤i , œÉi2 (XT
),
i Xi )

(21)

‚àí1
which means that Œ≤ÃÇi conditioned on Xi is unbiased with covariance matrix given by œÉi2 (XT
. Thus, we can further
i Xi )
develop Ln (Astat ) as

 h

 i
Ln (Astat ) = max Tr EXi Ei Œ£(Œ≤i ‚àí Œ≤ÃÇi )(Œ≤i ‚àí Œ≤ÃÇi )T Xi
,
(22)
i‚àà[m]

h
i
‚àí1
= max œÉi2 Tr Œ£EXi (XT
X
)
i
i
i‚àà[m]

i
h T
= max œÉi2 Tr EXi (Xi Xi )‚àí1 ,
i‚àà[m]

where X = Œ£‚àí1/2 X is a whitened context and Xi is its corresponding whitened matrix. Since whitened contexts X are
T
distributed as N (0, I), we know that (Xi Xi )‚àí1 is distributed as an inverse Wishart W ‚àí1 (Id , ki ), whose expectation is

Active Learning for Accurate Estimation of Linear Models

Id /(ki ‚àí d ‚àí 1), and thus,
Ln (Astat ) = max

i‚àà[m]

œÉi2 Tr




1
œÉi2 d
Id = max
.
ki ‚àí d ‚àí 1
i‚àà[m] ki ‚àí d ‚àí 1

(23)

Note that this final expression requires that ki > d + 1, since it is not possible to compute an OLS estimate with less than
d + 1 samples. Therefore, we proceed by minimizing Eq. 23, subject to ki > d + 1. We write ki = ki0 + d + 1 for some
ki0 > 0. Thus, equivalently, we minimize
œÉ2 d
(24)
Ln (Astat ) = max i 0 .
i
ki
P
Since i ki0 = n ‚àí m(d + 1), we may conclude that the optimal ki0 is given by

œÉ2
ki0 = P i 2 n ‚àí m(d + 1) ,
j œÉj
so that all the terms in the RHS of Eq. 24 are equal. This gives us the optimal static allocation
œÉ2
ki‚àó = P i 2 (n ‚àí m(d + 1)) + d + 1
j œÉj


œÉ2
œÉ2
= P i 2 n + (d + 1) 1 ‚àí i2 ,
œÉ
j œÉj
where œÉ 2 = (1/m)

P

i

œÉi2 is the mean variance across the m problem instances.

Thus, for the optimal static allocation, the expected loss is given by
L‚àón = Ln (A‚àóstat ) = d max
i

P
=

j

œÉi2
œÉ2
P i 2
j œÉj

œÉ2

n ‚àí (d + 1) œÉÃÑi2


œÉj2 d

n ‚àí m(d + 1)
P
P


2
2
œÉ
d
œÉ
j j
j j md(d + 1)

=
+
n
n n ‚àí m(d + 1)
P


Ô£´ P
Ô£∂
2
2
2
j œÉj d
j œÉj md
Ô£∏,
=
+OÔ£≠
n
n2
which concludes the proof. Furthermore the following bounds trivially holds for any n ‚â• 2m(d + 1)
mdœÉ 2
mdœÉ 2
‚â§ L‚àón ‚â§ 2
.
n
n

(25)

Active Learning for Accurate Estimation of Linear Models

B. Loss of an OLS-based Learning Algorithm (Proof of Lemma 2)
Unlike in the proof of Proposition 1, when the number of pulls is random and depends on the value of the previous
observations (through Dn ), then in general, the OLS estimates Œ≤bi,n are no longer distributed as Eq. 21 and the derivation
for Astat no longer holds. In fact, for a learning algorithm, the value ki,t itself provides some information about the
observations that have been obtained up until time t and were used by the algorithm to determine ki,t . In the following, we
show that by ignoring the current context Xt when choosing instance It , we are still able to analyze the loss of T RACE UCB and obtain a result very similar to the static case.
We first need two auxiliary lemmas (Lemmas 8 and 9), one on the computation of an empirical estimate of the variance of
the noise, and an independence result between the variance estimate and the linear regression estimate.
Lemma 8. In any linear regression problem with noise  ‚àº N (0, œÉ 2 ), after t ‚â• d + 1 samples, given an OLS estimator
Œ≤bt , the noise variance estimator can be computed in a recurrent form as
2
œÉÃÇt+1
=

T
(Xt+1
Œ≤ÃÇt ‚àí Yt+1 )2
1
t‚àíd
œÉÃÇt2 +
,
T (XT X )‚àí1 X
t‚àíd+1
t ‚àí d + 1 1 + Xt+1
t
t+1
t

(26)

where Xt ‚àà Rt√ód is the sample matrix.
Proof. We first recall the ‚Äúbatch‚Äù definition of the variance estimator
t

œÉ
bt2 =

1 X
1
b 2
(Ys ‚àí XsT Œ≤bt )2 =
kYt ‚àí XT
t Œ≤t k
t ‚àí d s=1
t‚àíd

‚àí1 T
Xt t , we have
Since Yt = Xt Œ≤ + t and Œ≤bt = Œ≤ + (XT
t Xt )

œÉ
bt2 =


1
1  T
1
‚àí1 T
2
T
T
‚àí1 T
k(XT
X
)
X

‚àí

k
=


‚àí

X
(X
X
)
X

(Et+1 ‚àí Vt+1 ).
=
t
t
t
t
t
t
t
t
t
t
t
t
t
t‚àíd
t‚àíd
t‚àíd

We now devise a recursive formulation for the two terms in the previous expression. We have
T
2
2
Et+1 = T
t+1 t+1 = t t + t+1 = Et + t+1 .

In order to analyze the second term we first introduce the design matrix St = XT
t Xt , which has the simple update rule
T
St+1 = St + Xt+1 Xt+1
. Then we have
T
‚àí1 T
Vt+1 = T
Xt+1 t+1
t+1 Xt+1 (Xt+1 Xt+1 )

‚àí1 T
T
T
T
T
= T
t Xt + t+1 Xt+1
t Xt + t+1 Xt+1 St + Xt+1 Xt+1

‚àí1 
T
T
 ‚àí1 S‚àí1
t Xt+1 Xt+1 St
T
T
T
T
,
= t Xt + t+1 Xt+1 St ‚àí
t Xt + t+1 Xt+1
‚àí1
T
1 + Xt+1 St Xt+1

where we used the Sherman-Morrison formula in the last equality. We further develop the previous expression as
‚àí1 T
T
T
Vt+1 = Vt + t+1 Xt+1
S‚àí1
t Xt+1 t+1 + 2t+1 Xt+1 St Xt t

‚àí T
t Xt

‚àí1
‚àí1
‚àí1
‚àí1
T
T
T
S‚àí1
S‚àí1
t Xt+1 Xt+1 St
t Xt+1 Xt+1 St
T
T St Xt+1 Xt+1 St
T
X

‚àí

X
X

‚àí
2
X
Xt+1 t+1 .
t
t+1
t+1
t+1
t
t
t+1
t
T S‚àí1 X
T S‚àí1 X
T S‚àí1 X
1 + Xt+1
1 + Xt+1
1 + Xt+1
t+1
t+1
t+1
t
t
t

‚àí1
T
T
T
We define Œ±t+1 = Xt+1
S‚àí1
t Xt t and œàt+1 = Xt+1 St Xt+1 , and then obtain
2
2
Œ±t+1
œàt+1
Œ±t+1 œàt+1
‚àí 2t+1
‚àí 2t+1
1 + œàt+1
1 ‚àí œàt+1
1 + œàt+1


2
2
Œ±
œà
Œ±
t+1
t+1
t+1
= Vt + 2t+1 œàt+1 +
+ 2t+1
‚àí
.
1 + œàt+1
1 + œàt+1
1 + œàt+1

Vt+1 = Vt + 2t+1 œàt+1 + 2Œ±t+1 t+1 ‚àí

Active Learning for Accurate Estimation of Linear Models

Bringing everything together we obtain

2
2
œàt+1
Œ±t+1
Œ±t+1
‚àí 2t+1
+
1 + œàt+1
1 + œàt+1
1 + œàt+1
2


t+1 ‚àí Œ±t+1
1
= Et ‚àí Vt +
2t+1 ‚àí 2t+1 Œ±t+1 + Œ±t+1 = Et ‚àí Vt +
.
1 + œàt+1
1 + œàt+1


Et+1 ‚àí Vt+1 = Et ‚àí Vt + 2t+1 1 ‚àí œàt+1 +

T
Since t+1 = Yt+1 ‚àí Xt+1
Œ≤, we may write

Et+1 ‚àí Vt+1

T
T
Yt+1 ‚àí Xt+1
(Œ≤ + S‚àí1
t Xt t )
= Et ‚àí Vt +
1 + œàt+1

2

T b
Yt+1 ‚àí Xt+1
Œ≤t
= Et ‚àí Vt +
1 + œàt+1

2
.

Recalling the definition of the variance estimate, we finally obtain

T b 2
Yt+1 ‚àí Xt+1
Œ≤t
1
1
1
(Et+1 ‚àí Vt+1 ) =
(Et ‚àí Vt ) +
T S‚àí1 X
t‚àíd+1
t‚àíd+1
t ‚àí d + 1 1 + Xt+1
t+1
t

T b 2
Yt+1 ‚àí Xt+1 Œ≤t
t‚àíd
1
=
œÉÃÇ 2 +
,
T S‚àí1 X
t‚àíd+1 t
t ‚àí d + 1 1 + Xt+1
t+1
t

2
œÉÃÇt+1
=

which concludes the proof.
Lemma 9. Let Fj be the œÉ-algebra generated by X1 , . . . , Xn and œÉÃÇ12 , . . . , œÉÃÇj2 . Then, for any j ‚â• d,
T
Œ≤ÃÇj | Fj ‚àº N (Œ≤, œÉ 2 (X1:j
X1:j )‚àí1 ).

(27)

Proof. We prove the lemma by induction. The statement is true for t = d. We want to prove the induction, that is if
‚àí1
Œ≤ÃÇt | Ft ‚àº N (Œ≤, œÉ 2 (XT
), then
t Xt )
‚àí1
Œ≤ÃÇt+1 | Ft+1 ‚àº N (Œ≤, œÉ 2 (XT
).
t+1 Xt+1 )

(28)

Let us first derive a recursive expression for Œ≤ÃÇt+1 . Let St = XT
t Xt , then
‚àí1 T

T
T
Œ≤bt+1 = Œ≤ + S‚àí1
Xt t + t+1 Xt+1
t+1 Xt+1 t+1 = St + Xt+1 Xt+1

‚àí1 
T

S‚àí1
t Xt+1 Xt+1 St
‚àí1
= St ‚àí
XT
t t + t+1 Xt+1 ,
‚àí1
T
1 + Xt+1 St Xt+1
where we used Sherman-Morrison formula. By developing the previous expression we obtain


‚àí1 T
T
T

Xt+1
S‚àí1
S‚àí1
t Xt+1
t Xt+1 Xt+1 St Xt t
‚àí1 T
‚àí1
b
‚àí
Œ≤t+1 = Œ≤ + St Xt t + t+1 St Xt+1 1 ‚àí
T S‚àí1 X
T S‚àí1 X
1 + Xt+1
1 + Xt+1
t+1
t+1
t
t
‚àí1
‚àí1
T
b
S Xt+1 Xt+1 (Œ≤t ‚àí Œ≤)
t+1 St Xt+1
= Œ≤bt +
‚àí t
.
‚àí1
T
T S‚àí1 X
1 + Xt+1 St Xt+1
1 + Xt+1
t+1
t
We can conveniently rewrite the previous expression as


‚àí1
T
S‚àí1
t Xt+1 Xt+1
bt ‚àí Œ≤) + t+1 St Xt+1
Œ≤bt+1 ‚àí Œ≤ = I ‚àí
(
Œ≤
T S‚àí1 X
T S‚àí1 X
1 + Xt+1
1 + Xt+1
t+1
t+1
t
t
= (I ‚àí Œ±t )(Œ≤bt ‚àí Œ≤) + Œ≥t t+1 ,

(29)

where Œ±t ‚àà Rd√ód and Œ≥t ‚àà Rd are defined implicitly. By Lemma 8, we notice that the sequence of empirical variances in
Ft is equivalent to the sequence of squared deviations up to t. In order to make this equivalence more apparent we define
the filtration
o
n
T
Gt = {Xs }ns=1 ‚à™ œÉÃÇ22 ‚à™ {(Xs+1
Œ≤ÃÇs ‚àí s+1 )2 }t‚àí1
s=2 ,

Active Learning for Accurate Estimation of Linear Models

so that Œ≤ÃÇt+1 | Ft+1 ‚àº Œ≤ÃÇt+1 | Gt+1 . We introduce two auxiliary random vectors conditioned on G
T
U = t+1 ‚àí Xt+1
(Œ≤ÃÇt ‚àí Œ≤) | Gt ,

V = Œ≤ÃÇt+1 ‚àí Œ≤ | Gt .

d

We want to show that the random vectors U ‚àà R and V ‚àà R are independent. We first recall that the noise t+1 | Gt ‚àº
N (0, œÉ 2 ), and it is independent of 1 , . . . , t , and Œ≤ÃÇt under Gt . Furthermore, by the induction assumption Œ≤ÃÇt | Gt is also
Gaussian, so we have that (Œ≤ÃÇt , t+1 ) are jointly Gaussian given Gt . Then we can conveniently rewrite U as
T
U = (‚àíXt+1 , 1)T (Œ≤ÃÇt , t+1 ) + Xt+1
Œ≤,

which shows that it is a Gaussian vector. Using the recursive formulation in Eq. 29 we can also rewrite V as



 Œ≤ÃÇt ‚àí Œ≤
V = (Id ‚àí Œ±t )(Œ≤ÃÇt ‚àí Œ≤) + Œ≥t t+1 = I ‚àí Œ±t Œ≥t
,
t+1
which is also Gaussian. Furthermore, we notice that under the induction assumption, EGt [U ] = 0 and EGt [V ] = 0 and thus
we need to show that E[U V | Gt ] = 0 to prove that U and V are uncorrelated
h

i
T
E[U V | Gt ] = EGt t+1 ‚àí Xt+1
(Œ≤ÃÇt ‚àí Œ≤) (Id ‚àí Œ±t )(Œ≤ÃÇt ‚àí Œ≤) + Œ≥t t+1
h
i


T
= Œ≥t EGt 2t+1 ‚àí EGt Xt+1
(Œ≤ÃÇt ‚àí Œ≤)(I ‚àí Œ±t )(Œ≤ÃÇt ‚àí Œ≤)
h
i
= œÉ 2 Œ≥t ‚àí EGt (I ‚àí Œ±t )(Œ≤ÃÇt ‚àí Œ≤)(Œ≤ÃÇt ‚àí Œ≤)T Xt+1
h
i
= œÉ 2 Œ≥t ‚àí (I ‚àí Œ±t ) EGt (Œ≤ÃÇt ‚àí Œ≤)(Œ≤ÃÇt ‚àí Œ≤)T Xt+1
‚àí1
= œÉ 2 Œ≥t ‚àí œÉ 2 (I ‚àí Œ±t )(XT
Xt+1
t Xt )

S‚àí1
t Xt+1
‚àí œÉ2
= œÉ2
T S‚àí1 X
1 + Xt+1
t+1
t
= œÉ2

T
S‚àí1
t Xt+1 Xt+1
I‚àí
‚àí1
T S
1 + Xt+1
t Xt+1

!
S‚àí1
t Xt+1

‚àí1
‚àí1
‚àí1
‚àí1
T
T
S‚àí1
t Xt+1 ‚àí (1 + Xt+1 St Xt+1 )St Xt+1 + St Xt+1 Xt+1 St Xt+1
T S‚àí1 X
1 + Xt+1
t+1
t

= 0.
It thus follows that, as U and V are uncorrelated, they are also independent. Combining the definition of Gt , U and its
independence w.r.t V , we have
V | Gj+1 = V | U, Gj
T
= V | {X1 , . . . , XT , œÉÃÇ22 , {(Xs+1
Œ≤ÃÇs ‚àí s+1 )2 }t‚àí1
s=2 }



 Œ≤ÃÇt ‚àí Œ≤
= I ‚àí Œ± t Œ≥t
| Gt .
t+1

By the induction hypothesis the vector in the previous expression is distributed as


 
 ‚àí1

0
0
Œ≤ÃÇt ‚àí Œ≤
2 St
‚àºN
,œÉ
.
0
0
1
t+1
Therefore, we conclude that
V | Gt+1



‚àº N 0, œÉ 2 I ‚àí Œ±t

where the covariance matrix Œ£0 can be written as

Œ£0 = I ‚àí Œ±t

= I ‚àí Œ±t


 St‚àí1
Œ≥t
0


0 
I ‚àí Œ±t
1



 St‚àí1 0 
I ‚àí Œ±t
Œ≥t
0
1
 ‚àí1

 St (I ‚àí Œ±t )T
Œ≥t
Œ≥tT

= (I ‚àí Œ±t )St‚àí1 (I ‚àí Œ±t )T + Œ≥t Œ≥tT .

Œ≥t

T

Œ≥t



T

= N (0, œÉ 2 Œ£0 ),

Active Learning for Accurate Estimation of Linear Models
T
Recalling the definitions of Œ±t and Œ≥t , and defining œàt+1 = Xt+1
S‚àí1
t Xt+1

!
!T
‚àí1
‚àí1
T
T
S
X
X
S
X
X
t+1
t+1
t
t
t+1
t+1
‚àí1
Œ£0 = I ‚àí
St
I‚àí
T S‚àí1 X
T S‚àí1 X
1 + Xt+1
1 + Xt+1
t+1
t+1
t
t
!
!T
S‚àí1
S‚àí1
t Xt+1
t Xt+1
+
‚àí1
T
T S‚àí1 X
1 + Xt+1 St Xt+1
1 + Xt+1
t+1
t
= S‚àí1
t ‚àí2
= S‚àí1
t ‚àí

‚àí1
‚àí1
T
T
T
S‚àí1
S‚àí1
S‚àí1 Xt+1 Xt+1
S‚àí1
t Xt+1 Xt+1 St
t Xt+1 Xt+1 St
t
+
+ œàt+1 t
1+r
(1 + œàt+1 )2
(1 + œàt+1 )2

‚àí1
T
S‚àí1
t Xt+1 Xt+1 St
‚àí1
‚àí1
= St+1
= (XT
,
t+1 Xt+1 )
1 + œàt+1

where we applied the Woodbury matrix identity in the last step. Finally, it follows that
‚àí1
Œ≤ÃÇt+1 | Ft+1 ‚àº N (Œ≤, œÉ 2 (XT
),
t+1 Xt+1 )

and the induction is complete.
Now we can prove Lemma 2:
Lemma. Let A be a learning algorithm that selects instances It as a function of the previous history, that is, Dt‚àí1 =
{X1 , I1 , YI1 ,1 , . . . , Xt‚àí1 , It‚àí1 , YIt‚àí1 ,t‚àí1 } and computes estimates Œ≤bi,n using OLS. Then, its loss after n steps can be
expressed as
 2 

œÉi
b ‚àí1 ,
Ln (A) = max EDt
Tr Œ£Œ£
(30)
i,n
ki,n
i‚àà[m]
where ki,n =

Pn

t=1

b i,n = XT Xi,n /ki,n .
I{It = i} and Œ£
i,n

Proof. For any instance i, we can assume that the following random variables are sampled before T RACE -UCB starts
collecting observations (we omit the i index in the table):
t=1
X1
1
Œ≤ÃÇ1
œÉÃÇ12

t=2
X2
2
Œ≤ÃÇ2
œÉÃÇ22

...
...
...
...
...

t=n
Xn
n
Œ≤ÃÇn
œÉÃÇn2

As a result, we can interpret T RACE -UCB as controlling the stopping time ti = ki,n for each problem i, that is, the total
number of samples ki,n , leading to the final estimates Œ≤ÃÇti and œÉÃÇt2i . In the following we introduce the notation X1:j as the
sample matrix constructed from exactly j samples, unlike Xi,n which is the sample matrix obtained with ki,n . So we have
X1:ki,n = Xi,n . Crucially, when the errors j are Gaussian, then Œ≤ÃÇj | X1:j and œÉÃÇj2 | X1:j are independent for any fixed j
(note these random variables have nothing to do with the algorithm‚Äôs decisions).
Let Fj be the œÉ-algebra generated by X1 , . . . , Xn and œÉÃÇ12 , . . . , œÉÃÇj2 . We recall that from Lemma 9
T
Œ≤bj |X1:j = Œ≤ÃÇj | Fj ‚àº N (Œ≤j , œÉ 2 (X1:j
X1:j )‚àí1 ).

(31)

Intuitively, this results says that, given the data X1:n , if we are additionally given all the estimates for the variance {œÉÃÇs2 }js=2
‚Äîwhich obviously depend on 1 , . . . , j ‚Äî, then the updated distribution for Œ≤ÃÇj does not change at all. This is a crucial
property since T RACE -UCB ignores the current context Xt and it makes decisions only based on previous contexts and
the variance estimates {œÉÃÇs2 }js=2 , thus allowing us to proceed and do inference on Œ≤ÃÇj as in the fixed allocation case.

Active Learning for Accurate Estimation of Linear Models

We now need to take into consideration the filtration Fi,j for a specific instance i and the environment filtration E‚àíi
containing all the contexts X and noise  from all other instances (different from i). Since the environment filtration E‚àíi is
independent from the samples from instance i, then we can still apply Lemma 9 and obtain
Œ≤bi,j | Fi,j , E‚àíi ‚àº Œ≤bi,j | Fi,j .

(32)

Now we can finally study the expected prediction error
Li,n (Œ≤bi,n ) =E[(Œ≤ÃÇi ‚àí Œ≤i )(Œ≤ÃÇi ‚àí Œ≤i )T ]
h
i
= EX1:n ,Œµ‚àíi E[(Œ≤ÃÇi ‚àí Œ≤i )(Œ≤ÃÇi ‚àí Œ≤i )T | X1:n , Œµ‚àíi ]
Ô£Æ
Ô£π
n
X
= EX1:n ,Œµ‚àíi Ô£∞
E[(Œ≤ÃÇki ‚àí Œ≤i )(Œ≤ÃÇki ‚àí Œ≤i )T | X1:n , Œµ‚àíi , ki = j] P(ki = j)Ô£ª
j=1

Ô£Æ
Ô£π
n
h
i
X
= EX1:n ,Œµ‚àíi Ô£∞
E EFj [(Œ≤ÃÇj ‚àí Œ≤i )(Œ≤ÃÇj ‚àí Œ≤i )T | Fj , X1:n , Œµ‚àíi , ki = j] | X1:n , Œµ‚àíi , ki = j P(ki = j)Ô£ª
j=1

Ô£π
Ô£Æ
n
h
i
X
E EFj [(Œ≤ÃÇj ‚àí Œ≤i )(Œ≤ÃÇj ‚àí Œ≤i )T | Fj , X1:n ] | X1:n , Œµ‚àíi , ki = j P(ki = j)Ô£ª
= EX1:n ,Œµ‚àíi Ô£∞

(33)

j=1

Ô£Æ
Ô£π
n
X
 2 T

= EX1:n ,Œµ‚àíi Ô£∞
E œÉi (X1:j X1:j )‚àí1 | X1:n , ki = j P(ki = j)Ô£ª
j=1

Ô£Æ
Ô£π
n
X
‚àí1
= EX1:n ,Œµ‚àíi Ô£∞
œÉi2 (XT
P(ki = j)Ô£ª
1:j X1:j )
j=1

=
=

œÉi2
œÉi2



‚àí1
EX1:n ,Œµ‚àíi Eki [(XT
]
1:ki X1:ki )


‚àí1
E (XT
,
1:ki X1:ki )

where in Eq. 33 we applied Lemma 9. Hence, going back to the definition of loss (see e.g., Eq. 22), we obtain an expression
for the loss which applies under T RACE -UCB (while not in general for other algorithms)


‚àí1
Ln (A) = max E œÉi2 Tr(Œ£(XT
)
i,n Xi,n )
i
 2


œÉi
‚àí1
Tr Œ£Œ£ÃÇi,n .
= max E
i
ki,n

Active Learning for Accurate Estimation of Linear Models

C. Concentration Inequalities (Proofs of Propositions 3 and 4)
In the next two subsections, we prove Propositions 3 and 4, respectively. In addition, we also show a confidence ellipsoid
result for the Œ≤b estimates, and a concentration inequality for the norm of the observations Xt .
C.1. Concentration Inequality for the Variance (Proof of Proposition 3)
We use the following concentration inequality for sub-exponential random variables.
Proposition 10. Let X be a mean-zero (œÑ 2 , b)-subexponential random variable. Then, for all Œ∑ > 0,

 2 
1
Œ∑ Œ∑
,
P(|X| ‚â• Œ∑) ‚â§ exp ‚àí min
.
2
œÑ2 b

(34)

Proof. See Proposition 2.2 in (Wainwright, 2015).
We first prove the concentration inequality for one single instance.
Proposition 11. Let t > d, Xt ‚àà Rt√ód be a random matrix whose entries are independent standard normal random
2
variables, Yt = XT
t Œ≤ + t , where the noise t ‚àº N (0, œÉt Id ) is independent from Xt , and Œ¥ ‚àà (0, 3/4]. Then, with
probability at least 1 ‚àí Œ¥, we have
s

2
64
1
2
2
2
|œÉÃÇt ‚àí œÉ | ‚â§ œÉ
log
,
(35)
t‚àíd
Œ¥
bt2 =
where œÉÃÇt2 is the unbiased estimate œÉ

1
t‚àíd kYt

‚àí Xt Œ≤bt k2 and Œ≤bt is the OLS estimator of Œ≤, given Xt and Yt .

Proof. First note that the distribution of œÉÃÇt2 conditioned on Xt follows the scaled chi-squared distribution, i.e.,
œÉÃÇt2 | X ‚àº

œÉ2
œá2 .
t ‚àí d t‚àíd

Also note that the distribution of the estimate does not depend on Xt and we can integrate out the randomness in Xt . In
order to show concentration around the mean, we directly use the sub-exponential properties of œÉÃÇt2 . The œá2k distribution is
sub-exponential with parameters (4k, 4).4 Furthermore, we know that for any constant C > 0, Cœá2k is (4C 2 k, 4C)-subexponential. As a result, we have that œÉÃÇt2 is subexponential with parameters


4œÉ 4 4œÉ 2
2
,
.
(œÑ , b) =
t‚àíd t‚àíd
Now we use Proposition 10 as our concentration bound. In our case, Œ∑ 2 /œÑ 2 < Œ∑/b, when Œ∑ < œÉ 2 . In such a case, if we
denote the RHS of (34) by Œ¥, we conclude that
r
8
1
log .
Œ∑ = œÉ2
t‚àíd
Œ¥
Then, Œ∑ < œÉ 2 holds when t ‚â• d + 8 log(1/Œ¥). Otherwise, if Œ∑ 2 /œÑ 2 > Œ∑/b, by Eq. 34, we have
Œ∑=

8œÉ 2
1
log .
t‚àíd
Œ¥

In this case, when t < d + 8 log(1/Œ¥), we have that
|œÉÃÇt2 ‚àí œÉ 2 | ‚â§ œÉ 2
4

See Example 2.5 in (Wainwright, 2015).

8
1
log .
t‚àíd
Œ¥

Active Learning for Accurate Estimation of Linear Models

We would like to derive a bound that is valid in both cases. Let x = 8 log(1/Œ¥)/(t ‚àí d), then we have
P |œÉÃÇt2 ‚àí œÉ 2 | ‚â• œÉ 2 max(x,
Suppose x ‚â•

‚àö

‚àö 
x) ‚â§ Œ¥.

(36)

‚àö
x, so t < d + log(1/Œ¥). Then, we would like to find C, such that x ‚â§ C x. As t ‚â• d + 1, we see that
‚àö

r

8 log(1/Œ¥) p
‚àÜ
‚â§ 8 log(1/Œ¥) = C.
t‚àíd
p
‚àö
‚àö ‚àö
if C > 1, it does follow that max(x, x) < max(C x, x) < 8 log(1/Œ¥)x, which corresponds to Œ¥ < 0.88. By (36),
we now conclude that
Ô£∂
Ô£´
s

2
64
1
Ô£∏ ‚â§ Œ¥,
P Ô£≠|œÉÃÇt2 ‚àí œÉ 2 | ‚â• œÉ 2
log
t‚àíd
Œ¥
x=

and the proof is complete.
In order to prove Proposition 3, we are just left to apply a union bound over steps t ‚àà {1, . . . , n} and instances i ‚àà
{1, . . . , m}. In order to avoid confusion, let œÉÃÇi,t be the estimate obtained by the algorithm after t steps and œÉÃÇi (j) the
estimate obtained using j samples. Let j > d, then

Ei (j) =

s
|œÉÃÇi2 (j)

‚àí

œÉi2 |

‚â•

œÉi2

64
j‚àíd


2 
1
log
,
Œ¥

is the high-probability event introduced in Proposition 11, which holds with probability 1 ‚àí Œ¥. Then we have that the event
E=

m \
n
\

Ei (j),

i=1 j=1

holds with probability 1 ‚àí Œ¥ 0 , with Œ¥ 0 = mnŒ¥. We complete the proof of Proposition 3 by properly tuning Œ¥ and taking
R ‚â• maxi œÉi2 . Recall that Proposition 3 is as follows.
Proposition. Let the number of pulls ki,t ‚â• d + 1 and R ‚â• maxi œÉi2 . If Œ¥ ‚àà (0, 3/4), then for any instance i and step
t > m(d + 1), with probability at least 1 ‚àí 2Œ¥ , we have
s
‚àÜ

2
|œÉÃÇi,t
‚àí œÉi2 | ‚â§ ‚àÜi,t = R

64
ki,t ‚àí d


log

2mn
Œ¥

2
.

(37)

C.2. Concentration Inequality for the Trace (Proof of Proposition 4)
We first recall some basic definitions. For any matrix A ‚àà Rn√ód , the i-th singular value si (A) is equivalent to si (A)2 =
Œªi (AT A), where Œªi is the i-th eigenvalue. The smallest and largest singular values smin and smax satisfy
smin kxk2 ‚â§ kAxk2 ‚â§ smax kxk2

for all x ‚àà Rd .

The extreme singular values measure the maximum and minimum distortion of points and their distance when going from
Rd to Rn via the linear operator A. We also recall that the spectral norm of A is given by
kAk = sup
x‚ààRd \0

kAxk2
= sup kAxk2 ,
kxk2
x‚ààS n‚àí1

and thus, smax (A) = kAk and smin (A) = 1/kA‚àí1 k, if A is invertible.
We report the following concentration inequality for the eigenvalues of random Gaussian matrices.

Active Learning for Accurate Estimation of Linear Models

Proposition 12. Let n ‚â• d, X ‚àà Rn√ód be a random matrix whose entries are independent standard normal random
T
variables, and Œ£ = X X/n be the corresponding empirical covariance matrix. Let Œ± > 0, then with probability at least
2
1 ‚àí 2 exp(‚àíŒ± d/2), we have
!
‚àö
‚àö
 ‚àí1 
2(1 + Œ±) d + (1 + Œ±)2 d/ n
‚àö
Tr Œ£
,
‚â•d 1‚àí ‚àö
‚àö
n + 2(1 + Œ±) d + (1 + Œ±)2 d/ n
and


Tr Œ£

‚àí1



!
‚àö
‚àö
2(1 + Œ±) d ‚àí (1 + Œ±)2 d/ n
‚àö
‚â§d 1+ ‚àö
.
‚àö
n ‚àí 2(1 + Œ±) d + (1 + Œ±)2 d/ n

In particular, we have
r 
r 
 ‚àí1 


d 2
d 2
‚â§ Tr Œ£
.
‚â§ d 1 + 2(1 + Œ±)
d 1 ‚àí (1 + Œ±)
n
n
Proof. We first derive the concentration inequality for the eigenvalues of the empirical covariance matrix and then we
invert it to obtain the guarantee for the inverse matrix. From Corollary 5.35 in (Vershynin, 2010), we have that for any
t>0
‚àö
2
‚àö
2
‚àö
‚àö
T
T
n ‚àí d ‚àí t ‚â§ Œªmin (X X) = smin (X)2 ‚â§ smax (X)2 = Œªmax (X X) ‚â§
n+ d+t ,
(38)
‚àö
with probability at least 1 ‚àí 2 exp(‚àít2 /2). Let Œ± > 0 and take t = Œ± d, then with probability at least 1 ‚àí 2 exp(‚àíŒ±2 d/2),
we obtain the desired statement
r !2
r !2


d
d
1 ‚àí (1 + Œ±)
‚â§ Œªmin Œ£ ‚â§ Œªmax Œ£ ‚â§ 1 + (1 + Œ±)
.
n
n
We now proceed by studying the eigenvalues of the inverse of the empirical covariance matrix Œªmin (Œ£
‚àí1
and Œªmax (Œ£ ) = 1/Œªmin (Œ£). Combined with Eq. 38 we have
 ‚àí1 
Œªmin Œ£
‚â•

‚àí1

) = 1/Œªmax (Œ£)

1
q 2
1 + (1 + Œ±) nd

=
1 + 2(1 + Œ±)

1
q

2(1 + Œ±)

d
n

+ (1 + Œ±)2 nd

q

=1‚àí
1 + 2(1 + Œ±)

d
n

q

+ (1 + Œ±)2 nd
d
n

.

+ (1 + Œ±)2 nd

Similarly, we have that
 ‚àí1 
1
Œªmax Œ£
‚â§
q 2
1 ‚àí (1 + Œ±) nd
1
q
1 ‚àí 2(1 + Œ±) nd + (1 + Œ±)2 nd
q
2(1 + Œ±) nd ‚àí (1 + Œ±)2 nd
q
=1+
.
1 ‚àí 2(1 + Œ±) nd + (1 + Œ±)2 nd
=

Using the fact that for any matrix A ‚àà Rd√ód , we may write d Œªmin (A) ‚â§ Tr(A) ‚â§ d Œªmax (A), we obtain the final
‚àí1
statement on the trace of Œ£ . The first of the two bounds can be further simplified by using 1/(1 + x) ‚â• 1 ‚àí x for any

Active Learning for Accurate Estimation of Linear Models

x ‚â• 0, thus obtaining
Œªmin Œ£

‚àí1 

r 
d 2
‚â• 1 ‚àí (1 + Œ±)
.
n


While under the assumption that n ‚â• 4(1 + Œ±)2 d we can use 1/(1 ‚àí x) ‚â§ 1 + 2x (for any x ‚â• 1/2) and obtain
r 

d 2
‚àí1 
Œªmax Œ£
‚â§ 1 + 2(1 + Œ±)
.
n

b ‚àí1 is the empirical covariance matrix of the
The statement of Proposition 4 (below) is obtained by recalling that Œ£Œ£
i,n
whitened sample matrix Xi,n and by a union bound over the number of samples ki,n and the number of instances i.
Proposition. Force the number of samples ki,t ‚â• d + 1. If Œ¥ ‚àà (0, 1), for any i ‚àà [m] and step t > m(d + 1) with
probability at least 1 ‚àí Œ¥/2, we have


r 2
r 2
‚àí1


Tr
Œ£
Œ£ÃÇ
i,t
d
d
‚â§
,
‚â§ 1 + 2CTr
1 ‚àí CTr
n
d
n
p
with CTr = 1 + 2 log(4nm/Œ¥)/d.
C.3. Concentration Inequality for Œ≤b Estimates
We slightly modify Theorem 2 from (Abbasi-Yadkori et al., 2011) to obtain a confidence ellipsoid over the Œ≤bi ‚Äôs.
‚àû
Theorem 13. Let {Ft }‚àû
t=0 be a filtration. Let {Œ∑t }t=1 be a real-valued stochastic process such that Œ∑t is Ft measurable
and Œ∑t is conditionally R-subgaussian for some R ‚â• 0, i.e.
 2 2
Œª R
ŒªŒ∑t
‚àÄŒª ‚àà R
E[e
| Ft‚àí1 ] ‚â§ exp
.
(39)
2
d
Let {Xt }‚àû
t=1 be an R -valued stochastic process such that Xt is Ft‚àí1 measurable. Assume that V is a d √ó d positive
definite matrix. For any t ‚â• 0, define

VÃÑt = V +

t
X

Xs XsT ,

St =

s=1

t
X

Œ∑s Xs .

(40)

s=1

Let V = ŒªId, Œª > 0, and define Yt = XtT Œ≤ ‚àó + Œ∑t . Assume that kŒ≤ ‚àó k2 ‚â§ S. Also, let Œ≤ÃÇt = VÃÑt‚àí1 XTt Yt be the ridge
estimate for Œ≤ after t observations Xt , Yt . Then, for any Œ¥ > 0, with probability at least 1 ‚àí Œ¥, for all t ‚â• 0, Œ≤ ‚àó lies in
v
Ô£±
Ô£º
! r
u
1/2
‚àí1/2
Ô£≤
u
det
VÃÑ
det
(ŒªI)
R
Œª Ô£Ω
t
Ct = Œ≤ ‚àà Rd : kŒ≤ÃÇt ‚àí Œ≤kVÃÑt /t ‚â§ ‚àö t2 log
+
S .
(41)
Ô£≥
Œ¥
t Ô£æ
t
Proof. Take x =

VÃÑt
t (Œ≤ÃÇt

‚àí Œ≤ ‚àó ) in equation 5 in the proof of Theorem 2 in (Abbasi-Yadkori et al., 2011).

We use the previous theorem by lower bounding the VÃÑt /t norm in Œ£ norm.
C.4. Bounded Norm Lemma
Lemma 14. Let X1 , . . . , Xt ‚àà Rd be iid subgaussian random variables.
If kX1 k2 is subexponential with parameters (a2 , b), then, for Œ± > 0
Ô£´
Ô£∂ (


t
Œ±2
X
1 ‚àí exp ‚àí 2ta
1
Œ±
2
2
2
PÔ£≠
kXj k ‚â§ E[kX1 k ] + Ô£∏ ‚â•

t j=1
t
1 ‚àí exp ‚àí Œ±
2b

if 0 ‚â§ Œ± ‚â§ ta2 /b,
if Œ± > ta2 /b.

(42)

Active Learning for Accurate Estimation of Linear Models

Proof. The proof directly follows by Proposition 10, by defining zero-mean subexponential random variable Z with parameters (a2 /t, b/t)
Ô£π
Ô£Æ
t
t
X
1X
1
Z=
kXj k2 ‚àí E Ô£∞
kXj k2 Ô£ª .
(43)
t j=1
t j=1

Corollary 15. Let X1 , . . . , Xt ‚àà Rd be iid gaussian variables, X ‚àº N (0, Id). Assume t ‚â• d + 1. Let Œ¥ > 0. Then, with
probability at least 1 ‚àí Œ¥,
 r
t
1X
d
1
2
kXj k ‚â§ d + 8 log
,
(44)
t j=1
Œ¥
t
Proof. For standard Gaussian X ‚àº N (0, Id), kXk2 ‚àº œá2d , and a2 = 4d and b = 4. Note that E[kXj k2 ] = d. By the proof
of Lemma 14 and (44)
s
 2
 !
 
2
b
1
1
‚â§ Œ¥,
when t ‚â• 2
P |Z| ‚â• a
log
log
.
(45)
t
Œ¥
a
Œ¥
 
 2
 

1
b
1
2b
log
‚â§ Œ¥,
when t < 2
log
.
(46)
P |Z| ‚â•
t
Œ¥
a
Œ¥
‚àö
Substituting a = 2 d and b = 4 leads to
s
 !
 
8d
1
8
1
P |Z| ‚â•
log
‚â§ Œ¥,
when t ‚â• log
.
(47)
t
Œ¥
d
Œ¥
 
 

1
8
1
8
‚â§ Œ¥,
when t < log
.
(48)
P |Z| ‚â• log
t
Œ¥
d
Œ¥
We would like to upper bound 8 log (1/Œ¥) /t in (48). As t > d, we see
 
 
8
1
1
8
log
‚â§ ‚àö log
.
t
Œ¥
Œ¥
dt

(49)

As a consequence,
 

1
8
‚â§ Œ¥,
P |Z| ‚â• ‚àö log
Œ¥
dt

8
when t < log
d

 
1
.
Œ¥

(50)

It follows that for all t > d
P |Z| ‚â• max

8
‚àö log
dt

  s
 !!
1
8d
1
,
log
‚â§ Œ¥.
Œ¥
t
Œ¥

(51)

As Œ¥ < 1, we finally conclude that
r
P |Z| ‚â• 8

d
log
t

 !
1
‚â§ Œ¥.
Œ¥

(52)

Therefore, with probability at least 1 ‚àí Œ¥,
t

1X
kXj k2 ‚â§ d + 8 log
t j=1
as stated in the corollary.

 r
1
d
,
Œ¥
t

(53)

Active Learning for Accurate Estimation of Linear Models

D. Performance Guarantees for T RACE -UCB
D.1. Lower Bound on Number of Samples (Proof of Theorem 5)
We derive the high-probability guarantee on the number of times each instance is selected.
Theorem. Let Œ¥ > 0. With probability at least 1 ‚àí Œ¥, the total number of contexts that T RACE -UCB allocates to each
problem instance i after n rounds satisfies
r
nd
C‚àÜ + 8CTr
‚àó
‚àí ‚Ñ¶(n1/4 )
ki,n ‚â• ki,n ‚àí
(54)
2
œÉmin
Œªmin
p
2
is known by the algorithm, and we defined C‚àÜ = 16R log(2mn/Œ¥), CTr = 1 + 2 log(4nm/Œ¥)/d, and
where R ‚â• œÉmax
P
2
Œªmin = œÉmin
/ j œÉj2 .
Proof. We denote by EŒ¥ the joint event on which Proposition 3 and Proposition 4 hold at the same time with an overall
probability 1 ‚àí Œ¥. This immediately gives upper and lower confidence bounds on the score si,t used in T RACE -UCB as
s
1 ‚àí CTr

d
ki,t

!2

s

œÉi2
si,t
‚â§
‚â§
ki,t
d

1 + 2CTr

d
ki,t

!2

œÉi2 + 2‚àÜi,t
.
ki,t

Recalling the definition of ‚àÜi,t we can rewrite the last term as
œÉi2 + 2‚àÜi,t
=
ki,t

16R log(2mn/Œ¥)
p
1+
œÉi2 ki,t ‚àí d

!

œÉi2
=
ki,t

C‚àÜ
1 + 2p
œÉi ki,t ‚àí d

!

œÉi2
,
ki,t

where C‚àÜ = 16R log(2mn/Œ¥). We consider a step t + 1 ‚â§ n at which It+1 = q. By algorithmic construction we have
that sp,t ‚â§ sq,t for every arm p ‚àà [m]. Using the inequalities above we obtain
s
1 ‚àí CTr

d
kp,t

!2

œÉp2
sq,t
sp,t
‚â§
‚â§
‚â§
kp,t
d
d

s
1 + 2CTr

d
kq,t

!2

œÉq2 + 2‚àÜq,t
kq,t

If t + 1 is the last time step at which arm q is pulled, then kq,t = kq,t+1 ‚àí 1 = kq,n ‚àí 1 and kp,n ‚â• kp,t . Then we can
rewrite the previous inequality as
s
1 ‚àí CTr

d
kp,n

!2

s

œÉp2
=: Ap,n ‚â§ Bq,n :=
kp,n

1 + 2CTr

d
kq,n ‚àí 1

!2

C‚àÜ
1 + 2p
œÉq kq,n ‚àí d ‚àí 1

!

œÉq2
.
kq,n ‚àí 1

(55)

‚àó
If every arm is pulled exactly the optimal number of times, then for any i ‚àà [m], ki,n = ki,n
and the statement of the
‚àó
theorem trivially holds. Otherwise, there exists at least one arm that is pulled more than ki,n . Let q be this arm, then
‚àó
‚àó
kq,n > kq,n
. We recall that L‚àón = dœÉq2 /(kq,n
‚àí d ‚àí 1) and we rewrite the RHS of Eq. 55 as

!2
!
œÉq2
d
C‚àÜ
p
1
+
1 + 2CTr
‚àó ‚àíd‚àí1
‚àó ‚àíd‚àí1
‚àó ‚àíd‚àí1
kq,n
kq,n
œÉq2 kq,n
!
s !2
s
L‚àón
L‚àón L‚àón
.
1 + 2CTr
1 + C‚àÜ
œÉq2
dœÉq6
d
s

Bq,n ‚â§

‚â§

We also simplify the LHS of Eq. 55 as
s
Ap,n =

1 ‚àí 2CTr

d
kp,n

+

2
CTr

d
kp,n

!

œÉp2
‚â•
kp,n

s
1 ‚àí 2CTr

d
kp,n

!

œÉp2
.
kp,n

Active Learning for Accurate Estimation of Linear Models

At this point we can solve Eq. 55 for kp,n and obtain a lower bound on it. We study the inequality 1/Ap,n ‚â• 1/Bp,n .
We first notice that
1
kp,n
‚â§ 2
Ap,n
œÉp

s
1 + 4CTr

d
kp,n

!
‚â§

‚àö 2
1 p
kp,n + 2CTr d ,
2
œÉp

where we used 1/(1 ‚àí x) ‚â§ 1 + 2x for x ‚â§ 1/2 and we added a suitable positive term to obtain the final quadratic form.
Similarly we have
!
!
s
s !2
s !2
s
L‚àón
L‚àón
d
L‚àón
d
d
1
= 1 ‚àí 2CTr
‚àí C‚àÜ
‚â• 1 ‚àí 2CTr
1 ‚àí C‚àÜ
,
Bq,n
œÉq2
dœÉq6 L‚àón
œÉq2
L‚àón
L‚àón œÉq6
where we used 1/(1 + x) ‚â• 1 ‚àí x for any x ‚â• 0. In order to ease the derivation of an explicit lower-bound on kp,n ,
we further simplify the previous expression by replacing higher
p order terms with a big-‚Ñ¶ notation. We first recall that
2
e
/n), then the terms of order (1/L‚àón ) and (1/ L‚àón ) clearly dominate the expression, while all other terms
L‚àón = Œò(mdœÉ
are asymptotically constant or decreasing in n and thus we can rewrite the previous bound as
s
‚àö
1
d
d
‚â• ‚àó ‚àí (C‚àÜ + 4CTr d)
‚àí ‚Ñ¶(1).
Bq,n
Ln
L‚àón œÉq6
‚àö
By setting C = C‚àÜ + 4CTr d we can finally use the upper bound on 1/Ap,n and the lower bound on 1/Bq,n to obtain
s
‚àö 2
d
d
1 p
kp,n + 2CTr d ‚â• ‚àó ‚àí C
‚àí ‚Ñ¶(1).
œÉp2
Ln
L‚àón œÉq6
We proceed with solving the previous inequality for kp,n and obtain
Ô£´
Ô£∂2
!1/2
s
‚àö
d
d
kp,n ‚â• œÉp2 Ô£≠
‚àíC
‚àí ‚Ñ¶(1)
‚àí 2CTr dÔ£∏ .
L‚àón
L‚àón œÉq6
Taking the square on RHS and adding and subtracting d + 1 we have
Ô£´
Ô£∂
!1/2
s
s
‚àö
d
d
d
d
2 Ô£∏
kp,n ‚â• d + 1 + œÉp2 Ô£≠ ‚àó ‚àí C
‚àí 4CTr d
‚àíC
‚àí ‚Ñ¶(1)
+ 4CTr
d ‚àí d ‚àí 1 ‚àí ‚Ñ¶(1).
Ln
L‚àón œÉq6
L‚àón
L‚àón œÉq6
We clearly notice that the first three terms in the RHS are dominant (they are higher order function of n through L‚àón ) and
thus we can isolate them and replace all other terms by their asymptotic lower bound as
s
s

dœÉp2
dœÉp4
1 
kp,n ‚â• d + 1 + ‚àó ‚àí
C
+ 4CTr d ‚àí ‚Ñ¶(n1/4 ),
‚àó
6
Ln
Ln
œÉq
2
‚àó
e
/n) to bound the higher order terms. Furthermore, we recall that kp,n
=
where we used the fact that L‚àón = Œò(mdœÉ
2
‚àó
dœÉp /Ln + d + 1 and thus we can finally write the previous bound as
s
s


dœÉp4
1
‚àó
kp,n ‚â• kp,n
‚àí
C
+
4C
d
‚àí ‚Ñ¶(n1/4 ).
Tr
L‚àón
œÉq6
P
2
The final bound is obtained by using œÉp2 / j œÉj2 = Œªp ‚â• Œªmin and œÉq2 ‚â• œÉmin
with the final expression
r
‚àö 
‚àö  C
1
‚àó
kp,n ‚â• kp,n
‚àí n 2
+ 4CTr d ‚àí ‚Ñ¶(n1/4 ).
œÉmin Œªmin

A quite loose bound based on the definition of C for the previous expression gives the final more readable result
r
nd
C‚àÜ + 8CTr
‚àó
kp,n ‚â• kp,n ‚àí
‚àí ‚Ñ¶(n1/4 ).
2
œÉmin
Œªmin

Active Learning for Accurate Estimation of Linear Models

D.2. Regret Bound (Proof of Theorem 6)
Theorem. The regret of the Trace-UCB algorithm, i.e., the difference between its loss and the loss of optimal static
allocation (see Eq. 8), is upper-bounded by


1  d 3/2
‚àó
Ln (A) ‚àí Ln ‚â§ O 2
,
(56)
œÉmin Œªmin n
P
2
where Œªmin = œÉmin
/ j œÉj2 .
Proof. We first simplify the expression of the loss for T RACE -UCB in Lemma 19. We invert trace operator and expectation
and have

 T 
2
T
Li,n (Œ≤biŒª ) = E Tr Œ£Wi,n œÉi2 XT
.
i,n Xi,n + Œª Œ≤i Œ≤i Wi,n
‚àí1
‚àí1
We notice that Wi,n = (XT
 (XT
, where  is the Lower ordering between positive-definite
i,n Xi,n + ŒªI)
i,n Xi,n )
matrices. We focus on the two additive terms in the trace separately. We have


T
T
T
Tr Œ£Wi,n XT
i,n Xi,n Wi,n = Tr Wi,n Xi,n Xi,n Wi,n Œ£


‚àí1 T
T
T
‚â§ Tr (XT
Xi,n Xi,n Wi,n
Œ£ = Tr Œ£Wi,n
(57)
i,n Xi,n )


1
‚àí1
b ‚àí1 ,
Tr Œ£Œ£
‚â§ Tr Œ£(XT
=
i,n Xi,n )
i,n
ki,n

b i,n .
where we used the fact that Tr(AB) = Tr(BA), Tr(AB) ‚â§ Tr(CB) if A  C and the definition of Œ£
Similarly, we have


T
T
Tr Œ£Wi,n Œ≤i Œ≤iT Wi,n
= kŒ≤i k2 Tr Œ£Wi,n Wi,n
b ‚àí1 )


Œª
(Œ£
i,n
‚àí1
2 max
‚â§ kŒ≤i k2 Tr (XT
X
)
Œ£W
‚â§
kŒ≤
k
Tr Œ£Wi,n
i,n
i
i,n i,n
ki,n
‚àí1
b )
b ‚àí1 )


Œªmax (Œ£
Œª
(Œ£
i,n
i,n
‚àí1
2 max
b ‚àí1 .
‚â§ kŒ≤i k2
Tr Œ£(XT
X
)
=
kŒ≤
k
Tr Œ£Œ£
i
i,n i,n
i,n
2
ki,n
ki,n
Going back to the loss expression we have
b ‚àí1
Tr Œ£Œ£
i,n
‚â§E
ki,n
"

Li,n (Œ≤biŒª )



œÉi2

b ‚àí1 )
Œªmax (Œ£
i,n
+ kŒ≤i k
ki,n
2

#
.

We decompose the loss in two terms depending on the high-probability event EŒ¥ under which the concentration inequalities
Proposition 3 and Proposition 4 hold at the same time
"
#

b ‚àí1 ) 
b ‚àí1 

 T   c
Œªmax (Œ£
Tr Œ£Œ£

i,n
i,n
2
2
Œª
2
T

œÉi + kŒ≤i k
Li,n (Œ≤bi ) ‚â§ E
EŒ¥ + Œ¥E Tr Œ£Wi,n œÉi2 XT
i,n Xi,n + Œª Œ≤i Œ≤i Wi,n EŒ¥ ,
ki,n
ki,n
where we used P(EŒ¥c ‚â§ Œ¥). If we denote the second expectation in the previous expression by Lci,n (Œ≤biŒª ), then we can use
Eq. 57 and obtain
 
 
T  c
T  c
Lci,n (Œ≤biŒª ) ‚â§ œÉi2 E Tr Œ£Wi,n
EŒ¥ + kŒ≤i kŒª2 E Tr Œ£Wi,n Wi,n
EŒ¥
Using the fact that Tr(AB) ‚â§ Œªmax (A)Tr(B), we can upper bound the previous equation as
 
 
Lci,n (Œ≤biŒª ) ‚â§ œÉi2 Tr(Œ£)E Œªmax (Wi,n )EŒ¥c + kŒ≤i kTr(Œ£)Œª2 E Œªmax (Wi,n )2 EŒ¥c
Recalling that thanks to the regularization Œªmax (Wi,n ) ‚â§ 1/Œª, we finally obtain

 œÉ2
Lci,n (Œ≤biŒª ) ‚â§ Tr(Œ£) i + kŒ≤i k .
Œª

(58)

Active Learning for Accurate Estimation of Linear Models

The analysis of the high-probability part of the bound relies on the concentration inequalities for the trace and Œªmax and
the lower bound on the number of samples ki,n from Thm. 5. We recall the three main inequalities we are going to use to
bound the loss
‚àö
‚àó
ki,n ‚â• ki,n
‚àí C nd ‚àí ‚Ñ¶(n1/4 ),
r 2

‚àí1
b ) ‚â§ d 1 + 2(1 + Œ±) d ,
Tr(Œ£Œ£
i,n
n
r 2

1
d
‚àí1
b
Œªmax (Œ£i,n ) ‚â§
,
1 + 2(1 + Œ±)
Œªmin (Œ£)
n
where C =

C‚àÜ +8C
‚àö Tr
2
œÉmin
Œªmin

b i,n and using Proposition 12,
and the last inequality is obtained by multiplying by Œ£‚àí1 Œ£ to whiten Œ£

and Œªmax (AB) ‚â§ Œªmax (A)Œªmax (B) and finally Œªmax (Œ£‚àí1 ) = 1/Œªmin (Œ£). We can invert the first inequality as
r 
‚àö



2C
1
1
1
d
1
d
‚àö
,
‚â§ ‚àó
‚â§ ‚àó +O ‚àó
‚â§ ‚àó +O 2
ki,n
ki,n
ki,n n
ki,n
œÉmin (Œªmin n)3/2
ki,n ‚àí C nd ‚àí ‚Ñ¶(n1/4 )

(59)

‚àó
= Œò(Œªi n) and using the definition of C (where we ignore C‚àÜ
where the last inequality is obtained by recalling that ki,n
and CTr ). We can then rewrite the high-probability loss as
"
#





b ‚àí1 
b ‚àí1 ) 
Tr Œ£Œ£
Œª
(Œ£
dœÉi2
1  d 3/2
1  d 3/2

i,n
i,n
2
2 max
‚àó
E
‚â§
œÉi + kŒ≤i k
+
O
‚â§
L
+
O
.
EŒ¥
n
‚àó
2
2
ki,n
ki,n
ki,n
œÉmin
Œªmin n
œÉmin
Œªmin n
Œª
By recalling the regret Rn = maxi Li,n (Œ≤i,n
) ‚àí L‚àón , bringing the bounds above together and setting Œ¥ = O(n‚àí3/2‚àí ) for
any  > 0 and a suitable multiplicative constant, we obtain the final regret bound


1  d 3/2
Rn ‚â§ O 2
.
œÉmin Œªmin n

D.3. High Probability Bound for Trace-UCB Loss (Proof of Theorem 7)
In this section, we start by defining a new loss function for algorithm A:
e n (A) = max kŒ≤i ‚àí Œ≤ÃÇi,n k2Œ£ .
L
i‚àà[m]

(60)

e n (A) is a random variable as Œ≤ÃÇi,n is random, and the expectation is only taken with respect to the test point
Note that L
X ‚àº F (leading to the Œ£-norm). We expect results of the following flavor: let Œ¥ > 0, then with probability at least 1 ‚àí Œ¥,
Ô£´Ô£´
Ô£∂3/2 Ô£∂
X d
Ô£∑
e n (A) ‚àí L
e ‚àón ‚â§ OÃÉ Ô£¨
L
œÉj2 Ô£∏ Ô£∏ ,
(61)
Ô£≠Ô£≠
n
j
e ‚àón to the optimal static allocation under ordinary least squares.
when A corresponds to T RACE -UCB, and L
e n (A), and proving Theorem 7:
We start by focusing on L
Theorem. Let Œ¥ > 0, and assume kŒ≤i k2 ‚â§ Z for all i, for some Z > 0. With probability at least 1 ‚àí Œ¥,
Pm 2 


3/2 !
œÉj
1
3m
d
j=1
e n (A) ‚â§
d + 2 log
+O
,
L
2
n
Œ¥
œÉmin
nŒªmin
P
2
where Œªmin = œÉmin
/ j œÉj2 .

(62)

Active Learning for Accurate Estimation of Linear Models

Proof. We define a set of events that help us control the loss, and then we show that these events simultaneously hold with
high probability. In particular, we need the following events:
2
1. EG ‚â° the good event holds (for all arms i, and all times t), which includes a confidence interval for œÉÃÇi,t
and the trace
of the empirical covariance matrix.

Holds with probability 1 ‚àí Œ¥G . This event is described and controlled in Proposition 3 and Proposition 4.
2. EM,i ‚â° the confidence intervals Ci,t created for arm i at time t contain the true Œ≤i at all times t ‚Äîbased on the
vector-valued martingale in (Abbasi-Yadkori et al., 2011).
Holds with probability 1 ‚àí Œ¥M,i . This event is described and controlled in Theorem 13.
3. EC,i,t ‚â° the empirical covariance Œ£ÃÇi,t for arm i at time t is close to Œ£. This event is a direct consequence of event EG .
4. EB,i,t ‚â° the first t observations pulled at arm i have norm reasonably bounded. The empirical average norm is not too
far from its mean. Holds with probability 1 ‚àí Œ¥B,i,t . This event is described and controlled in Corollary 15.
Let H be the set of all the previous events. Then, by the union bound
X
P (‚à©‚ààH ) ‚â• 1 ‚àí
Œ¥ .

(63)

‚ààH

e n (A) = maxi‚àà[m] kŒ≤i ‚àí Œ≤ÃÇi,n k2 is upper bounded by a quantity
Our goal is to show that if ‚à©‚ààH  holds, then the loss L
Œ£
that resembles the expected loss of the algorithm that knows the œÉi2 ‚Äôs in advance.
P
Fix Œ¥ >
P0. We want Œ¥ = ‚ààH Œ¥ , and we would like to assign equal weight to all the sets of events. First, Œ¥G = Œ¥/3.
Also,
P
P i Œ¥M,i = Œ¥/3, implying Œ¥M,i = Œ¥/3m for every arm i ‚àà [m]. Finally, to bound observation norms, we set
i
t Œ¥B,i,t = Œ¥/3. It follows that we can take Œ¥B,i,t = Œ¥/3mT , even though t really ranges from d to n.
Assume that EG , EM,i and EB,i,t hold for all arms i and times t. Then, by Theorem 5, the final number of pulls for arm i
can be lower bounded by
s
!s
‚àö 
œÉi2
œÉ2
œÉi2
P i 2 dn + o
+1
dn ,
(64)
ki ‚â• P 2 n ‚àí c
2
œÉmin
j œÉj
j œÉj


p
where c = 2 1 + 2 log(12mn/Œ¥)/d .
For notational simplicity, we denote by Œ≤ÃÇi,t the estimate after t pulls. Thus, with respect to our previous notation where
Œ≤ÃÇi,n referred to our final estimate, we have that Œ≤ÃÇi,ki,n = Œ≤ÃÇi,n as ki,n is the total number of pulls for arm i.
If the EM,i events hold, then we know that our Œ≤ÃÇi,t estimates are not very far from the true values Œ≤i when t is large. In
particular, we know that the error is controlled by the radius Ri,t of the confidence ellipsoids. We expect these radiuses to
decrease with the number of observations per arm, t. As we have a lower bound on the total number of pulls for arm i, ki,n ,
if the confidence ellipsoids apply, then we can directly obtain an upper bound on the radius Ri,t at the end of the process.
We need to do a bit of work to properly bound kŒ≤ÃÇi,ki,n ‚àí Œ≤i k2Œ£ .
Fix arm i, and assume EM,i holds. In addition, assume kŒ≤i k2 ‚â§ Z for all i. Let VÃÑi,t = ŒªI + XTi,t Xi,t , where Xi,t contains
the first t observations pulled by arm i. We modify the proof of Theorem 2 in (Abbasi-Yadkori et al., 2011) by taking
x = (VÃÇt /t)(Œ≤ÃÇt ‚àí Œ≤‚àó ) in their equation 5 (we are using their notation in the latter expression). Assume the algorithm pulls
arm i a total of t times ‚Äîki,n is a stopping time with respect to the œÉ-algebra that includes the environment (other arms)‚Äî
then, by Theorem 13
v
! r
u
1/2
‚àí1/2
det VÃÑi,t
det (ŒªI)
Œª
œÉi u
t
2 log
+
Z.
(65)
kŒ≤ÃÇi,t ‚àí Œ≤i kVÃÑi,t /t ‚â§ ‚àö
Œ¥
t
t
M,i

Active Learning for Accurate Estimation of Linear Models

We would like to upper bound kŒ≤ÃÇi,ki,n ‚àí Œ≤i kŒ£ by means of kŒ≤ÃÇi,ki,n ‚àí Œ≤i kVÃÑi,k

i,n

/ki,n .

Note that when t grows, VÃÑi,t /t ‚Üí Œ£

as the regularization is washed out. The distance between Œ£ÃÇi,t = VÃÑi,t /t ‚àí (Œª/t)I and Œ£ is captured by event C,i,t .
Formally, as EG holds, we know that the difference between Œ£ and Œ£ÃÇi,t is bounded in operator norm for any i and t by
r
r

r
2
2
d
d
kŒ£ ‚àí Œ£ÃÇi,t k ‚â§ 2 1 +
log
kŒ£k = c
Œªmax (Œ£).
(66)
d
Œ¥G
t
t
Then, as a consequence, for all x ‚àà Rs
r
T

x (Œ£ ‚àí Œ£ÃÇi,t )x ‚â§ c Œªmax (Œ£)

d
kxk22 .
t

(67)

In particular, by taking x = Œ≤ÃÇi,t ‚àí Œ≤i ,
r
c Œªmax (Œ£)

d
kŒ≤ÃÇi,t ‚àí Œ≤i k22 ‚â• (Œ≤ÃÇi,t ‚àí Œ≤i )T (Œ£ ‚àí Œ£ÃÇi,t )(Œ≤ÃÇi,t ‚àí Œ≤i )
t
= kŒ≤ÃÇi,t ‚àí Œ≤i k2Œ£ ‚àí kŒ≤ÃÇi,t ‚àí Œ≤i k2Œ£ÃÇ .
i,t

In addition, note that kxk2Œ£ÃÇ

i,t

(68)
(69)

= kxk2VÃÑi,t /t ‚àí (Œª/t)kxk22 . We conclude that
r

kŒ≤ÃÇi,t ‚àí

Œ≤i k2Œ£

‚â§ kŒ≤ÃÇi,t ‚àí

Œ≤i k2Œ£ÃÇ
i,t

d
kŒ≤ÃÇi,t ‚àí Œ≤i k22
t
!
r
d Œª
‚àí
kŒ≤ÃÇi,t ‚àí Œ≤i k22 .
c Œªmax (Œ£)
t
t

+ c Œªmax (Œ£)

= kŒ≤ÃÇi,t ‚àí Œ≤i k2VÃÑi,t /t +

(70)
(71)

On the other hand, we know that kŒ≤ÃÇi,t ‚àí Œ≤i k2Œ£ ‚â• Œªmin (Œ£)kŒ≤ÃÇi,t ‚àí Œ≤i k22 .
Therefore, by (65)
1

kŒ≤ÃÇi,t ‚àí Œ≤i k2Œ£ ‚â§
1‚àí



1
Œªmin (Œ£)

c Œªmax (Œ£)

q

d
t

‚àí

Œª
t

 kŒ≤ÃÇi,t ‚àí Œ≤i k2VÃÑi,t /t

v
! ‚àö Ô£π2
u
1/2
‚àí1/2
u
det
VÃÑ
det
(ŒªI)
1
ŒªZ
œÉi t
i,t
Ô£∞‚àö
‚â§
2 log
+ ‚àö Ô£ª
1 ‚àí Œ≥t
Œ¥M,i
t
t
Ô£π2
Ô£Æ v
!
u

!
‚àö
det
VÃÑ
1
1Ô£∞ u
1
1
i,t
‚â§
œÉi t2
log
+ log
+ ŒªZ Ô£ª
1 ‚àí Œ≥t t
2
det (ŒªI)
Œ¥M,i

(72)

Ô£Æ

Ô£Æ v
Ô£π2
Ô£∂
u Ô£´


t
u
X
‚àö
1
1 Ô£Ø u Ô£≠1
1
Ô£∏ + ŒªZ Ô£∫
‚â§
kXj k2VÃÑ ‚àí1 + log
Ô£∞œÉi t2
Ô£ª ,
1 ‚àí Œ≥t t
2 j=1
Œ¥M,i
i,t

where we defined Œ≥t =

c Œªmax (Œ£)

q

d
t

‚àí

Œª
t

(73)

(74)

(75)



shows that
log

/Œªmin (Œ£), and we used Lemma 11 in (Abbasi-Yadkori et al., 2011) which
!
t
X
det VÃÑi,t
‚â§
kXj k2VÃÑ ‚àí1 .
i,t
det (ŒªI)
j=1

(76)

‚àí1
We would like to approximate the VÃÑi,t
norm, by means of the inverse covariance norm, Œ£‚àí1 . The whitened equation that
ÀÜ k ‚â§ , with  = cpd/t.
is equivalent to (67) ‚Äî see Lemma 12 ‚Äî is given by kI ‚àí Œ£ÃÑ
i,t

Active Learning for Accurate Estimation of Linear Models

It implies that for any j = 1, . . . , d,
r
1‚àíc

d
‚àíO
t

r
 
 
d
d
d
ÀÜ
‚â§ Œªj (Œ£ÃÑi,t ) ‚â§ 1 + c
+O
.
t
t
t

(77)

‚àí1
The VÃÑi,t
norm can be bounded as follows

‚àí1
‚àí1
kxk2VÃÑ ‚àí1 = xT VÃÑi,t
x = xT ŒªI + XTi,t Xi,t
x
i,t

‚àí1 1/2 ‚àí1/2
= xT Œ£‚àí1/2 Œ£1/2 ŒªI + XTi,t Xi,t
Œ£ Œ£
x

‚àí1
= xÃÑT ŒªŒ£‚àí1 + XÃÑTi,t XÃÑi,t
xÃÑ

‚àí1
Œª ‚àí1 ÀÜ ‚àí1
1
Œ£ + Œ£ÃÑi,t
xÃÑ,
= xÃÑT
t
t

(78)
(79)
(80)
(81)

where xÃÑ denotes the whitened version of x. We can now apply the matrix inversion lemma to see that
kxk2VÃÑ ‚àí1
i,t

1
= xÃÑT
t
1
= xÃÑT
t



Œª ‚àí1 ÀÜ ‚àí1
Œ£ + Œ£ÃÑi,t
t

‚àí1
xÃÑ


t
ÀÜ Œ£‚àí1/2
I + Œ£‚àí1/2 Œ£ÃÑ
i,t
Œª

1 ÀÜ
‚àí1/2 ‚àí1 ‚àí1/2 ÀÜ
ÀÜ
R Œ£
Œ£ÃÑi,t xÃÑ,
= xÃÑT Œ£ÃÑ
i,t ‚àí Œ£ÃÑi,t Œ£
t
ÀÜ ‚àí Œ£ÃÑ
ÀÜ Œ£‚àí1/2
Œ£ÃÑ
i,t
i,t

(82)
‚àí1

!
ÀÜ
Œ£‚àí1/2 Œ£ÃÑ
i,t

xÃÑ

(83)
(84)

ÀÜ Œ£‚àí1/2 , a positive definite matrix. We upper bound the previous
where we implicitly defined R = (t/Œª)I + Œ£‚àí1/2 Œ£ÃÑ
i,t
expression to conclude that

1 ÀÜ
‚àí1/2 ‚àí1 ‚àí1/2 ÀÜ
ÀÜ
R Œ£
Œ£ÃÑi,t xÃÑ
kxk2VÃÑ ‚àí1 = xÃÑT Œ£ÃÑ
(85)
i,t ‚àí Œ£ÃÑi,t Œ£
i,t
t
p
ÀÜ )
1 + c d/t + O (d/t)
1 ÀÜ
Œªmax (Œ£ÃÑ
i,t
‚â§ xÃÑT Œ£ÃÑ
kxÃÑk22 ‚â§
kxÃÑk22 .
(86)
i,t xÃÑ ‚â§
t
t
t

If we now go back to (76), using the previous results, we see that
t
X

r
kXj k2VÃÑ ‚àí1 ‚â§

j=1

i,t

1+c

Ô£∂
Ô£´
 !
t
X
d
d
Ô£≠1
kXÃÑj k22 Ô£∏ .
+O
t
t
t j=1

(87)

Substituting the upper bound in (75):
Ô£π2
Ô£Æ v
Ô£∂
u Ô£´


t
u
X
‚àö
1
1 Ô£Ø u Ô£≠1
1
Ô£∏ + ŒªZ Ô£∫
kXj k2VÃÑ ‚àí1 + log
kŒ≤ÃÇi,t ‚àí Œ≤i k2Œ£ ‚â§
Ô£ª
Ô£∞œÉi t2
1 ‚àí Œ≥t t
2 j=1
Œ¥M,i
i,t

(88)

Ô£Æ v
Ô£π2
Ô£´
Ô£∂
u
r
 !
t
u
X
‚àö Ô£∫
1
1 Ô£Ø u
d
1
d
Ô£≠1
kXÃÑj k22 Ô£∏ + 2 log
‚â§
+O
+ ŒªZ Ô£ª .
Ô£∞œÉi t 1 + c
1 ‚àí Œ≥t t
t
t
t j=1
Œ¥M,i
By Corollary 15, with probability 1 ‚àí Œ¥B,i,t , the empirical average norm of the white gaussian observations is controlled
by

r
t
1X
1
d
2
kXÃÑj k ‚â§ d + 8 log
.
(89)
t j=1
Œ¥B,i,t
t

Active Learning for Accurate Estimation of Linear Models

As Œ¥B,i,t = Œ¥/3mn and Œ¥M,i = Œ¥/3m, we conclude that
Ô£Æ v
Ô£π2
r
u
 !

r !


u
‚àö
1
d
d
1
d
3mn
3m
Ô£∞œÉi t 1 + c
kŒ≤ÃÇi,t ‚àí Œ≤i k2Œ£ ‚â§
+O
d + 8 log
+ 2 log
+ ŒªZ Ô£ª
1 ‚àí Œ≥t t
t
t
Œ¥
t
Œ¥

‚â§


1 ‚àí cŒªmax (Œ£)

1
q

d
t

‚àí

Œª
t


/Œªmin (Œ£)

Ô£Æ v
Ô£π2
u

r
 !
‚àö
1 Ô£∞ u
3mn
d
3m
d
œÉi t d + c + 8 log
+ 2 log
+O
+ ŒªZ Ô£ª .
t
Œ¥
t
t
Œ¥
(90)

At this point, recall that under our events
‚àö
‚àó
ki,n ‚â• ki,n
‚àí C nd ‚àí ‚Ñ¶(n1/4 ),

(91)

‚àö Tr . As (90) decreases in t, we will bound the error kŒ≤ÃÇi,t ‚àí Œ≤i k2 by taking the number of pulls
where C = œÉC2‚àÜ +8C
Œ£
min Œªmin ‚àö
P
t = (œÉi2 / j œÉj2 )n + O( dn) (in particular, the RHS of (91)).

If we take Œª = 1/n, we have that
kŒ≤ÃÇi,t ‚àí Œ≤i k2Œ£
‚â§


1 ‚àí cŒªmax (Œ£)

‚â§

‚â§

1
q

d
t

‚àí

Œª
t


/Œªmin (Œ£)

(92)
Ô£π
Ô£Æ v
2
u

r
 !
3mn
1 Ô£∞ u
d
d
3m ‚àö Ô£ª
t
d + c + 8 log
+O
+ 2 log
+ ŒªZ
œÉi
t
Œ¥
t
t
Œ¥

Ô£π2
Ô£Æ v
u
 !

r
 !
‚àö
3m
d
d
d
d
1 Ô£∞ u
3mn
+O
œÉi t d + c + 8 log
+O
+ 2 log
+ ŒªZ Ô£ª
t
t
t
Œ¥
t
t
Œ¥
Ô£Æ
s
r !!
r !Ô£π

r !
d + 2 log 3m
1 Ô£∞ 2
3m
3mn
Z2
d
d
d Ô£ª
Œ¥
1+O
œÉi d + 2 log
+ c + 8 log
+
+ 2ZœÉi
+o
.
t
t
Œ¥
Œ¥
t
n
n
n
Œªmax (Œ£)
1+c
Œªmin (Œ£)

r

Now, by (91) and (59), and using the Œªi = œÉi2 /

P

j

œÉj2 notation

kŒ≤ÃÇi,t ‚àí Œ≤i k2Œ£

(93)


‚â§

=

=
=


3m

 qd
3mn

q

q 

d
d
r !! œÉ 2 d + 2 log
+ œÉi2 c + 8 log Œ¥
i
Œ¥
t + 2ZœÉi
n +o
n
d
‚àö
1+O
‚àó ‚àí C nd ‚àí ‚Ñ¶(n1/4 )
n
ki,n

q 


 qd
d
r !! œÉ 2 d + 2 log 3m + œÉ 2 c + 8 log 3mn + 2ZœÉi
+
o
i
i
Œ¥
Œ¥
t
n
d
‚àö
1+O
‚àó ‚àí C nd ‚àí ‚Ñ¶(n1/4 )
n
ki,n
r !!
r !#
‚àö


! " 
d
1
d
3m
d
2
1+O
+O 2
œÉi d + 2 log
+ OÃÉ
‚àó
3/2
n
ki,n
Œ¥
n
œÉmin (Œªmin n)






2
3/2
œÉi
1
d
3m
+O 2
.
d + 2 log
‚àó
ki,n
Œ¥
œÉmin Œªmin n

(94)

Active Learning for Accurate Estimation of Linear Models

E. Loss of a RLS-based Learning Algorithm
E.1. Distribution of RLS estimates
Proposition 16. Given a linear regression problem with observations Y = X T Œ≤ +  with Gaussian noise with variance
œÉ 2 , after n contexts X and the corresponding observations Y, the ridge estimate of parameter Œª is obtained as
Œ≤ÃÇ Œª = (XT X + ŒªI)‚àí1 XT Y = WXT Y,
with W = (XT X + ŒªI)‚àí1 , and its distribution conditioned on X is

Œ≤ÃÇ Œª | X ‚àº N Œ≤ ‚àí ŒªWŒ≤, œÉ 2 W(XT X)WT .

(95)

Proof. Recalling the definition of the OLS estimator Œ≤b (assuming it exists), we can easily rewrite the RLS estimator as
b
Œ≤ÃÇ Œª = (XT X + ŒªI)‚àí1 (XT X)(XT X)‚àí1 XT Y = (XT X + ŒªI)‚àí1 (XT X)Œ≤.
b We just need to compute the correThis immediately gives that the conditional distribution of Œ≤ÃÇ Œª is Gaussian as for Œ≤.
sponding mean vector and the covariance matrix. We first notice that the RLS estimator is biased as

E[Œ≤ÃÇ Œª X] = (XT X + ŒªI)‚àí1 (XT X)Œ≤.
Let S = XT X, then we can further rewrite the bias as


‚àí1
E[Œ≤ÃÇ Œª X] = (S + ŒªSS‚àí1 )‚àí1 SŒ≤ = S I + ŒªS‚àí1
SŒ≤

= (I + ŒªS‚àí1 )‚àí1 Œ≤ = I ‚àí Œª(S + ŒªI)‚àí1 Œ≤
= Œ≤ ‚àí Œª(S + ŒªI)‚àí1 Œ≤ = Œ≤ ‚àí ŒªWŒ≤,
where we used the matrix inversion lemma. Recalling that the covariance of Œ≤b is œÉ 2 (XT X)‚àí1 , the covariance of Œ≤bŒª is then
h
i
h
i
Cov Œ≤ÃÇ Œª |X = W(XT X)Cov Œ≤ÃÇ|X (XT X)WT = œÉ 2 W(XT X)WT .

E.2. Loss Function of a RLS-based Algorithm
We start by proving the loss function in the case of a static algorithm.
Lemma 17. Let A be a learning algorithm that selects instance i for ki,n times, where ki,n is a fixed quantity chosen in
advance, and that returns estimates Œ≤biŒª obtained by RLS with regularization Œª. Then its loss after n steps can be expressed
as

 T 
2
T
Ln (Astat ) = max Tr Œ£E Wi,n œÉi2 XT
,
(96)
i,n Xi,n + Œª Œ≤i Œ≤i Wi,n
i‚àà[m]

where Wi,n =

(XT
i,n Xi,n

+ ŒªI)

‚àí1

, and Xni is the matrix with the ki,n contexts from instance i.

Proof. The proof follows the same steps as in App. A up to Eq. 22, where we have

 h

 i
Ln (Astat ) = max Tr EXi Ei Œ£(Œ≤i ‚àí Œ≤ÃÇi )(Œ≤i ‚àí Œ≤ÃÇi )T Xi
.
i‚àà[m]

Following Proposition 16, we can refine the inner expectation as
h
i
E (Œ≤ÃÇ ‚àí Œ≤)(Œ≤ÃÇ ‚àí Œ≤)T | X
h
i
= E (Œ≤ÃÇ ‚àí Œ≤ + ŒªWŒ≤ ‚àí ŒªWŒ≤)(Œ≤ÃÇ ‚àí Œ≤ + ŒªWŒ≤ ‚àí ŒªWŒ≤)T | X
h
i
= E (Œ≤ÃÇ ‚àí E[Œ≤ÃÇ | X] ‚àí ŒªWŒ≤)(Œ≤ÃÇ ‚àí E[Œ≤ÃÇ | X] ‚àí ŒªWŒ≤)T | X
h
i
= E (Œ≤ÃÇ ‚àí E[Œ≤ÃÇ | X])(Œ≤ÃÇ ‚àí E[Œ≤ÃÇ | X])T | X + Œª2 WŒ≤Œ≤ T WT
= œÉ 2 W(XT X)WT + Œª2 WŒ≤Œ≤ T WT


= W œÉ 2 XT X + Œª2 Œ≤Œ≤ T WT .

Active Learning for Accurate Estimation of Linear Models

Plugging the final expression back into Ln (Astatic ) we obtain the desired expression.
We notice that a result similar to Lemma 9 holds for RLS estimates as well.
Proposition 18. Assume the noise  is Gaussian. Let œÉÃÇ 2 be the estimate for œÉ 2 computed by using the residuals of the OLS
solution Œ≤ÃÇ. Then, Œ≤ÃÇ Œª and œÉÃÇ 2 are independent random variable conditionally to X.
Proof. As shown in the proof of Proposition 16, we have Œ≤ÃÇ Œª = (XT X + ŒªI)‚àí1 (XT X)Œ≤b and we know that functions of
independent random variables are themselves independent. Since the matrix mapping Œ≤b to Œ≤bŒª is fixed given X, and Œ≤ÃÇ and
œÉÃÇ 2 are conditionally independent from Lemma 9, then the statement follows.
We can now combine Proposition 18 and Lemma 17 to conclude that a similar expression to Eq. 97 holds for the ridge
estimators also when a non-static algorithm such as T RACE -UCB is run.
Lemma 19. Let A be a learning algorithm such that It is chosen as a function of Dt‚àí1
=
{X1 , I1 , YI1 ,1 , . . . , Xt‚àí1 , It‚àí1 , YIt‚àí1 ,t‚àí1 }, and that it returns estimates Œ≤biŒª obtained by RLS with regularization Œª.
Then its loss after n steps can be expressed as
 T 

2
T
,
(97)
Ln (A) = max Tr Œ£E Wi,n œÉi2 XT
i,n Xi,n + Œª Œ≤i Œ≤i Wi,n
i‚àà[m]

‚àí1
where Wi,n = (XT
, and Xi,n is the matrix with the ki,n contexts from instance i.
i,n Xi,n + ŒªI)
2
Proof. The proof follows immediately by extending Lemma 9 to Œ≤ÃÇŒª as, by Proposition 18, Œ≤ÃÇŒª and œÉÃÇOLS
are independent.
Then, we proceed in a way similar to that in the proof of Lemma 2 to perform the required conditioning.

Active Learning for Accurate Estimation of Linear Models

F. Sparse Trace-UCB Algorithm
F.1. Summary
High-dimensional linear regression models are remarkably common in practice. Companies tend to record a large number
of features of their customers, and feed them to their prediction models. There are also cases in which the number of problem instances under consideration m is large, e.g., too many courses in the MOOC example described in the introduction.
Unless the horizon n is still proportionally large w.r.t. md, these scenarios require special attention. In particular, algorithms like T RACE -UCB that adaptively use contexts in their allocation strategy become more robust than their context-free
counterparts.
A natural assumption in such scenarios is sparsity, i.e., only a small subset of features are relevant to the prediction
problem at hand (have non-zero coefficient). In our setting of m problem instances, it is often reasonable to assume that
these instances are related to each other, and thus, it makes sense to extend the concept of sparsity to joint sparsity, i.e., a
sparsity pattern across the instances. Formally, we assume that there exists a s  d such that
‚àÜ

|S| = | ‚à™i‚àà[m] supp(Œ≤i )| = s,

(98)

(j)

where supp(Œ≤i ) = {j ‚àà [d] : Œ≤i 6= 0} denotes the support of the i‚Äôth problem instance. A special case of joint sparsity is
when |supp(Œ≤i )| ‚âà s, for all i, i.e., most of the relevant features are shared across the instances.
In this section, we focus on the scenario where dm > n. When we can only allocate a small (relative to d) number of
contexts to each problem instance, proper balancing of contexts becomes extremely important, and thus, the algorithms
that do not take into account context in their allocation are destined to fail. Although T RACE -UCB has the advantage of
using context in its allocation strategy, it still needs to quickly discover the relevant features (those in the support) and only
use those in its allocation strategy.
This motivates a two-stage algorithm, we call it S PARSE -T RACE -UCB, whose pseudocode is in Algorithm 2. In the first
stage, the algorithm allocates contexts uniformly to all the instances, L contexts per instance, and then recovers the support.
b and applies the standard T RACE -UCB to all the instances, but
In the second stage, it relies on the discovered support S,
b Note that L should be large enough that with high probability, support is exactly
only takes into account the features in S.
discovered, i.e., Sb = S.
There exists a large literature on how to perform simultaneous support discovery in jointly sparse linear regression problems (Negahban & Wainwright, 2011; Obozinski et al., 2011; Wang et al., 2013), which we discuss in detail below.
Most of these algorithms minimize the regularized empirical loss
min

M‚ààRd√óm

m
1X
kYi ‚àí Xi M[, i]k2 + Œª kMk,
k i=1

where k is the number of samples per problem, M be the matrix whose i‚Äôth column is M[, i] = Œ≤ÃÇi , Xi ‚àà Rk√ód , and
Yi = Xi Œ≤i + i . In particular, they use la /lb block regularization norm, i.e., kMkla /lb = kvkla , where vi = kM[i, ]klb
and M[i, ] is the i‚Äôth row of M. In short, the S PARSE -T RACE -UCB algorithm uses the l1 /l2 block regularization Lasso
algorithm (Wang et al., 2013), an extension of the algorithm in (Obozinski et al., 2011), for its support discovery stage.
We extend the guarantees of Theorem 7 to the high dimensional case with joint sparsity, assuming s is known.
The following is the main result of this section:
Theorem 20. Let Œ¥1 > 0. Assume kŒ≤i k2 ‚â§ Z for all i, for some Z > 0, and assume the parameters (n, d, s, Œ≤i , Œ£) satisfy
conditions C1 to C5 in (Wang et al., 2013). Let œà be the sparsity overlap function defined in (Obozinski et al., 2011). If
(1:m)
L > 2(1 + v) œà log(d ‚àí s)œÅu (Œ£SC SC |S )/Œ≥ 2 for some constant v > 0, and n ‚àí Lm ‚â• (s + 1)m, then, with probability at
least 1 ‚àí Œ¥1 ‚àí Œ¥2 ,
!3/2
P 2 
P

œÉj
s j œÉj2
3m
2c
j
e n (A) ‚â§
L
s + 2 log
+p 2
+ o (z) ,
(99)
n ‚àí Lm
Œ¥1
œÉmin n ‚àí Lm


p
where c ‚â§ 2 1 + 2 log(12mn/Œ¥1 )/s and we defined Œ¥2 = m exp(‚àíc0 log s) + exp(‚àíc1 log(d ‚àí s)) for positive
constants c0 , c1 > 0, and z = (s/(n ‚àí Lm))

3/2

.

Active Learning for Accurate Estimation of Linear Models

The exact technical assumptions and the proof are given and discussed in below. We simply combine the high-probability
results of Theorem 7, and the high-probability support recovery of Theorem 2 in (Wang et al., 2013).
In addition, we provide Corollary 21, where we study the regime of interest where the support overlap is complete (for
simplicity), n = C1 ms log d  md for C1 > 0, and L = C2 s log d, for C1 ‚àí C2 > 0.
Corollary 21. Under the assumptions of Theorem 20, let Œ¥1 > 0, assume n = C1 ms log d, the support of all arms are
equal, and set L = C2 s log d, for CÃÑ := C1 ‚àí C2 > 0. Then, with probability at least 1 ‚àí Œ¥1 ‚àí Œ¥2 ,
P
e n (A) ‚â§
L

j

œÉj2

CÃÑms log d



3m
s + 2 log
Œ¥1


+p

P

2c
2
œÉmin

j

œÉj2

CÃÑm log d

!3/2
+ o (z)

(100)



p
where c ‚â§ 2 1 + 2 log(12mn/Œ¥1 )/s and we defined Œ¥2 = m exp(‚àíc0 log s) + exp(‚àíc1 log(d ‚àí s)) for constants
‚àí3/2
.
c0 , c1 > 0, and z = CÃÑm log d
Algorithm 2 contains the pseudocode of our Sparse-T RACE -UCB algorithm.
Algorithm 2 Sparse-T RACE -UCB Algorithm.
1: for i = 1, . . . , m do
2:
Select problem instance i exactly L times
3: end for
4: Run l1 /l2 Lasso to recover support SÃÑ = ‚à™i supp(Œ≤ÃÇi,L )
5: for i = 1, . . . , m do
6:
Select problem instance i exactly s + 1 times
2
7:
Compute its OLS estimates Œ≤ÃÇi,m(L+s+1) and œÉÃÇi,m(L+s+1)
with respect to dimensions in SÃÑ.
8: end for
9: for steps t = m(L + s + 1) + 1, . . . , n do
10:
for problem instance 1 ‚â§ i ‚â§ m do
11:
Compute score based on SÃÑ dimensions only:
si,t‚àí1 =

2

œÉ
bi,t‚àí1
+ ‚àÜi,t‚àí1
Tr Œ£Œ£ÃÇ‚àí1
i,t‚àí1
ki,t‚àí1

12:
end for
13:
Select problem instance It = arg maxi‚àà[m] si,t
14:
Observe Xt and YIt ,t
15:
Update OLS estimators Œ≤ÃÇIt ,t and œÉÃÇI2t ,t based on SÃÑ
16: end for
Œª
17: Return RLS estimates {Œ≤ÃÇiŒª }m
/ SÃÑ
i=1 , with Œ≤ÃÇij = 0 if j ‚àà

Given our pure exploration perspective, it is obviously more efficient to learn the true supports as soon as possible. That
way we can adjust our behavior by collecting the right data based on our initial findings. Note that this is not always the
case; for example, if the total number of pulls is unknown. Then it is not clear what is the right amount of budget to invest
upfront to recover the supports (see tracking algorithms and doubling trick).
We briefly describe Algorithm 2 in words. First, in the recovery stage we sequentially pull all arms a number of times,
say L times. We do not take into account the context, and just apply a round robin technique to pull each arm exactly L
times. In total, there are exactly s components that are non-zero for at least one arm (out of d). After the Lm pulls, we
use a block-regularized Lasso algorithm to recover the joint sparsity pattern. We discuss some of the alternatives later. The
outcome of this stage is a common support Sb := ‚à™i supp(Œ≤ÃÇi ). With high probability we recover the true support Sb = S. In
the second stage, or pure exploration stage, the original T RACE -UCB algorithm is applied. The T RACE -UCB algorithm
works by computing an estimate œÉÃÇi2 at each step t for each arm i. Then, it pulls the arm maximizing the score
si,t‚àí1 =

2

œÉ
bi,t‚àí1
+ ‚àÜi,t‚àí1
Tr Œ£Œ£ÃÇ‚àí1
i,t‚àí1 .
ki,t‚àí1

Active Learning for Accurate Estimation of Linear Models

b In particular,
The key observation is that in the second stage we only consider the components of each context that are in S.
OLS
2
we start by pulling s + 1 times each arm so that we can compute the initial OLS estimates Œ≤ÃÇi and œÉÃÇi . We keep updating
those estimates when an arm is pulled, and the trace is computed with respect to the components in Sb only.
Finally, we return the Ridge estimates based only on the data collected in the second stage.
F.2. A note on the Static Allocation
WhatP
is the optimal static performance in this setting if the œÉ 2 ‚Äôs are known? For simplicity, suppose we pull arm i exactly
2
(œÉi / j œÉj2 ) n times. We are interested in Lasso guarantees for kX T (Œ≤ÃÇi ‚àí Œ≤i )k22 . Note in this case we can actually set Œªi
as a function of œÉi2 as required in most Lasso analyses, because œÉi2 is known.
A common guarantee is as follows (see (Hastie et al., 2015; Raskutti et al., 2010)). With high probability
kŒ≤ÃÇi ‚àí Œ≤i k22 ‚â§

c2 œÉi2 œÑ s log d
,
Œ≥2
k

where k is the number of observations, d the ambient dimension, s the efficient dimension, Œ≥ is the restricted eigenvalues
constant for Œ£, œÑ > 2 is the parameter that tunes the probability bound, and c is a universal constant.
P
Thus, if we set k = (œÉi2 / j œÉj2 ) n, then we obtain that whp
Ô£´
Ô£∂
m
2
X
s log d
c
œÑ
œÉj2 Ô£∏
.
(101)
kŒ≤ÃÇi ‚àí Œ≤i k22 ‚â§ 2 Ô£≠
Œ≥
n
j=1
Note that the latter event is independent across different i ‚àà [m], so all of them simultaneously hold with high probability.
The term Œ≥ ‚àí2 was expected as depending on the correlation levels in Œ£ the problem can be easier or harder. In addition,
note that as kŒ≤ÃÇi ‚àí Œ≤i k2Œ£ = Tr(Œ£(Œ≤ÃÇi ‚àí Œ≤i )(Œ≤ÃÇi ‚àí Œ≤i )T ), we have that
Œªmin (Œ£) kŒ≤ÃÇi ‚àí Œ≤i k22 ‚â§ kŒ≤ÃÇi ‚àí Œ≤i k2Œ£ ‚â§ Œªmax (Œ£)kŒ≤ÃÇi ‚àí Œ≤i k22 .

(102)

F.3. Simultaneous Support Recovery
There has been a large amount of research on how to perform simultaneous support recovery in sparse settings for multiple
regressions. Let M be the matrix whose i-th column is M(i) = Œ≤i .
A common objective function after k observations per problem is
min
MÃÑ‚ààRd√óm

m
1X
kYj ‚àí Xj MÃÑ(j) k2 + Œª kMÃÑk,
k j=1

(103)

where we assumed Yj = Xj Œ≤j + j , and Xj ‚àà Rk√ód , Yj , j ‚àà Rk and Œ≤j ‚àà Rd .
The la /lb block regularization norm is
kMÃÑkla /lb = kvka ,

where vj = kMÃÑj kb

MÃÑj is the j-th row of MÃÑ.

(104)

There are a few differences among the most popular pieces of work.
Negahban and Wainwright (Negahban & Wainwright, 2011) consider random Gaussian designs Xj ‚àº N (0, Œ£j ) with
random Gaussian noise (and common variance). The regularization norm is l1 /l‚àû . In words, they take the sum of the
absolute values of the maximum element per row in MÃÑ. This forces sparsity (via the l1 norm), but once a row is selected
there is no penalty in increasing the Œ≤ÃÑ components up to the current maximum of the row. They tune Œª as in the standard
analysis of Lasso, that is, proportionally to œÉ 2 , which is unknown in our case. Results are non-asymptotic, and recovery
happens with high probability when the number of observations is k > Cs(m + log d). They show that if the overlap is not
large enough (2/3 of the support, for m = 2 regression problems), then running independent Lasso estimates has higher
statistical efficiency. We can actually directly use the results in (Negahban & Wainwright, 2011) if we assume an upper
2
bound œÉmax
‚â§ R is known.

Active Learning for Accurate Estimation of Linear Models

Obozinski, Wainwright and Jordan (Obozinski et al., 2011) use l1 /l2 block regularization (aka Multivariate Group Lasso).
Their design is random Gaussian, but it is fixed across regressions: Xj = X. They provide asymptotic guarantees under the
scaling k, d, s ‚Üí ‚àû, d ‚àí s ‚Üí ‚àû, and standard assumptions like bounded Œ£-eigenspectrum, the irrepresentable condition,
and self-incoherence. The first condition is not only required for support recovery, but also for l2 consistency. The last two
conditions are not required for risk consistency, while essential for support recovery. To capture the amount of non-zero
pattern overlap among regressions, they define the sparsity overlap function œà, and their sample requirements are a function
of œà. In particular, one needs k > C œà log(d ‚àí s), where the constant C depends on quantities related to the covariance
matrix of the design matrices, and œà can be equal to s/m, if all the patterns overlap, and at most s if they are disjoint.
Their theorems use a sequence of regularization parameters
r
f (d) log d
,
where f (d) ‚Üí ‚àû as d ‚Üí ‚àû,
Œªk =
k
in such a way that Œªk ‚Üí 0 as k, d ‚Üí ‚àû. Finally, k > 2s is also required. They also provide a two-stage algorithm for
efficient estimation of individual supports for each regression problem. All these optimization problems are convex, and
can be efficiently solved in general.
To overcome the issue of common designs (we do not pull each context several times), we use the results by Wang, Liang,
and Xing in (Wang et al., 2013). They extend the guarantees in (Obozinski et al., 2011) to the case where the design
matrices are independently sampled for each regression problem. In order to formally present their result, we describe
some assumptions. Let Œ£(i) be the covariance matrix for the design observations of the i-th regression (in our case, they
are all equal to Œ£), and S the union of the sparse supports across regressions.
‚Ä¢ C1 There exists Œ≥ ‚àà (0, 1] such that k|Ak|‚àû ‚â§ 1 ‚àí Œ≥, where


‚àí1 

(i)
(i)

Ajs = max  Œ£S C S Œ£SS
1‚â§i‚â§m

js



,


(105)

for j ‚àà S C and s ‚àà S.
‚Ä¢ C2 There are constants 0 < Cmin ‚â§ Cmax < ‚àû, such that the eigenvalues of all matrices Œ£(i) are in [Cmin , Cmax ].
‚Ä¢ C3 There exists a constant Dmax < ‚àû such that
max |k

1‚â§i‚â§m

‚Ä¢ C4 Define the regularization parameter
r
Œªk =

f (d) log d
,
k



(i)

Œ£SS

‚àí1

k|‚àû ‚â§ Dmax .

(106)

where f (d) ‚Üí ‚àû as d ‚Üí ‚àû,

(107)

such that Œªk ‚Üí 0 as k ‚Üí ‚àû.
‚Ä¢ C5 Define œÅ(k, s, Œªk ) as
s
œÅ(k, s, Œªk ) :=



2
12s
8œÉmax
s log s
‚àö
+ Œªk Dmax +
,
k Cmin
Cmin k

(108)

and assume œÅ(k, s, Œªk )/b‚àómin = o(1), where b‚àómin = minj‚ààS kMj k2 .
We state the main theorem in (Wang et al., 2013); k is the number of observations per regression.
Theorem 22. Assume the parameters (k, d, s, M, Œ£(1:m) ) satisfy conditions C1 to C5. If for some small constant v > 0,
(1:m)

k > 2(1 + v) œà log(d ‚àí s)

œÅu (Œ£SC SC |S )
Œ≥2

,

(109)

Active Learning for Accurate Estimation of Linear Models

then the l1 /l2 regularized problem given in (103) has a unique solution MÃÇ, the support union supp(MÃÇ) equals the true
support S, and kMÃÇ ‚àí Mkl‚àû /l2 = o(b‚àómin ), with probability greater than
1 ‚àí m exp(‚àíc0 log s) ‚àí exp(‚àíc1 log(d ‚àí s)),

(110)

where c0 and c1 are constants.
The following proposition is also derived in (Wang et al., 2013) (Proposition 1):
Proposition 23. Assume Œ£(1:m) satisfy C2, then œà is bounded by


s
s
‚â§ œà = œà M, Œ£(1:m) ‚â§
.
m Cmin
Cmin

(111)

For our purposes, there is a single Œ£, which implies that we can remove the max expressions in C1 and C3. Corollary
2 in (Wang et al., 2013) establishes that when supports are equal for all arms, the number of samples required per arm is
reduced by a factor of m.
F.4. High-Dimensional Trace-UCB Guarantees
If the support overlap is complete we can reduce the sampling complexity of the first stage by a factor of m; we only need
(1:m)

Lm > 2(1 + v) s log(d ‚àí s)

œÅu (Œ£SC SC |S )
Cmin Œ≥ 2

(112)

observations in total, for some small constant v > 0.
Now we show our main result for high-dimensional Trace-UCB, Theorem 20.
Theorem. Let Œ¥1 > 0. Assume kŒ≤i k2 ‚â§ Z for all i, for some Z > 0, and assume the parameters (n, d, s, Œ≤i , Œ£) satisfy
conditions C1 to C5 in (Wang et al., 2013). Let œà be the sparsity overlap function defined in (Obozinski et al., 2011). If
(1:m)
L > 2(1 + v) œà log(d ‚àí s)œÅu (Œ£SC SC |S )/Œ≥ 2 for some constant v > 0, and n ‚àí Lm ‚â• (s + 1)m, then, with probability at
least 1 ‚àí Œ¥1 ‚àí Œ¥2 ,
!3/2
P 2 
P

œÉj
s j œÉj2
3m
2c
j
e n (A) ‚â§
L
s + 2 log
+ o (z) ,
(113)
+p 2
n ‚àí Lm
Œ¥1
œÉmin n ‚àí Lm


p
where c ‚â§ 2 1 + 2 log(12mn/Œ¥1 )/s and we defined Œ¥2 = m exp(‚àíc0 log s) + exp(‚àíc1 log(d ‚àí s)) for positive
constants c0 , c1 > 0, and z = (s/(n ‚àí Lm))

3/2

.

Proof. We start by assuming the recovered support SÃÇ is equal to the true support S. This event, say ES , holds with
probability at least 1 ‚àí Œ¥2 by Theorem 22 when L satisfies (112).
Then, we fix Œ¥1 > 0, and run the second stage applying the Trace-UCB algorithm in the s-dimensional space given by the
components in SÃÇ.
By Theorem 7, if n ‚àí Lm ‚â• (s + 1)m, then, with probability at least 1 ‚àí Œ¥1 , the following holds:
!3/2
P 2 
P


3/2 !
s j œÉj2
3m
2c
s
j œÉj
e
Ln (A)S ‚â§
s + 2 log
+p 2
+o
,
n ‚àí Lm
Œ¥1
n ‚àí Lm
œÉmin n ‚àí Lm

(114)

e n (A)S denotes the loss restricted to the components in Œ≤ that are in SÃÇ (and Œ£S ). However, under event ES , we
where L
recovered the true support, and our final estimates for Œ≤ij for each j 6‚àà S and arm i will be equal to zero, which corresponds
e n (A) = L
e n (A)S .
to their true value. Hence L
We conclude that (114) holds with probability at least 1 ‚àí Œ¥1 ‚àí Œ¥2 .
One regime of interest is when n = C1 ms log d  md. In addition, let us assume complete support overlap across arms,
so œà = s/Cm. Then, we set the number of initial pulls per arm to be L = C2 s log d, with C1 > C2 .
In this case, we have that Corollary 21 holds.

